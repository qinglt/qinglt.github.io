[{"title":"JVM","url":"/posts/66c016fb/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><img src=\"/../images/image-20220429205418010.png\" alt=\"image-20220429205418010\"></p>\n","categories":["Java"],"tags":["八股文"]},{"title":"Redis学习","url":"/posts/8434e219/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"1、String\"><a href=\"#1、String\" class=\"headerlink\" title=\"1、String\"></a>1、String</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">append key <span class=\"string\">&quot;字符串&quot;</span> <span class=\"comment\"># 向key后追加一个字符串，如果当前key不存在，就相当于set</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen key <span class=\"comment\"># 获取字符串长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr key <span class=\"comment\"># 加一</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr key <span class=\"comment\"># 自减1</span></span><br><span class=\"line\"></span><br><span class=\"line\">incrby value <span class=\"comment\">#增加value，可以设置步长，指定增量</span></span><br><span class=\"line\"></span><br><span class=\"line\">decrby value <span class=\"comment\"># 减少value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################################################</span></span><br><span class=\"line\">字符串范围 range </span><br><span class=\"line\"></span><br><span class=\"line\">getrange key start end <span class=\"comment\"># 下标从0开始，start-end</span></span><br><span class=\"line\">getrange key 0 -1 <span class=\"comment\"># 查看整个字符串,获取全部字符串，和get key是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换</span></span><br><span class=\"line\"><span class=\"comment\"># 替换指定位置开始的字符串</span></span><br><span class=\"line\">setrange key offset string <span class=\"comment\"># offset：偏移量，string：要替换的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################################################</span></span><br><span class=\"line\"><span class=\"comment\"># setex(set with expire) # 设置过期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># setnx(set if not exist) # 不存在设置，在分布式锁中会经常使用，保证当前这个值存在</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setex key3 30 hello  <span class=\"comment\"># 设置key3的值30s后过期</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 27</span><br><span class=\"line\">127.0.0.1:6379&gt; get key3</span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;redis&quot;</span> <span class=\"comment\"># 如果mykey不存在，创建mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;mykey&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;key2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;MongoDB&quot;</span> <span class=\"comment\"># 如果mykey存在，则创建失败</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get mykey</span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\"><span class=\"comment\">########################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 批量set，get</span></span><br><span class=\"line\">mset k1 v1 k2 v2 ... <span class=\"comment\"># 同时设置多个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget k1 k2 ... <span class=\"comment\"># 同时获取多个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx k1 v1 k2 v2 ... <span class=\"comment\"># msetnx是一个原子性的操作，要么一起成功，要么一起失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class=\"comment\"># 设置一个user:1对象，值为json字符串来保存一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">mset user:1:name zhangsan user:1:age 20 <span class=\"comment\"># 这里的key是一个巧妙的设计，user:&#123;id&#125;:&#123;field&#125;，如此设计在redis中是完全可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">getset <span class=\"comment\"># 先get后se</span></span><br><span class=\"line\">getset key value <span class=\"comment\"># 如果不存在值则返回nil，如果存在值则获取原来的值，然后set</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String类似的使用场景：value除了是我们的字符串还可以是数字\"><a href=\"#String类似的使用场景：value除了是我们的字符串还可以是数字\" class=\"headerlink\" title=\"String类似的使用场景：value除了是我们的字符串还可以是数字\"></a>String类似的使用场景：value除了是我们的字符串还可以是数字</h2><p>计数器<br>统计多单位的数量 uid<br>粉丝数<br>对象缓存存储</p>\n<h1 id=\"2、list\"><a href=\"#2、list\" class=\"headerlink\" title=\"2、list\"></a>2、list</h1><p>基本的数据类型，列表</p>\n<p>在redis里面，我们可以把list玩成栈，队列</p>\n<p>所有的list命令都是用l来开头的，不区分大小写命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush list one <span class=\"comment\"># 将一个值或多个值插入到列表的头部</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1 <span class=\"comment\"># 获取所有元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 1 <span class=\"comment\"># 获取0-1，通过区间获取具体的值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush list right <span class=\"comment\"># 将一个值放在链表的尾部</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list  0  -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;right&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##############################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">lpop key <span class=\"comment\"># 移除列表的第一个元素</span></span><br><span class=\"line\">rpop key <span class=\"comment\"># 移除列表的最后一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">lindex key index <span class=\"comment\"># 获取key的index下标处的值，index从0开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">llen key <span class=\"comment\"># 获取list的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除指定的值</span></span><br><span class=\"line\">lrme key count value <span class=\"comment\"># 删除count个value，从前往后删除，精确匹配</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#############################################################</span></span><br><span class=\"line\">trim 修剪操作：list截断</span><br><span class=\"line\">ltrim key start stop <span class=\"comment\"># 截取list的start到stop之间的所有元素，左右都闭合，这个list就已经被改变了，只剩下截取的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpoplpush <span class=\"built_in\">source</span> destination <span class=\"comment\"># 移除列表的最后一个元素并添加到目的列表的第一个</span></span><br><span class=\"line\"></span><br><span class=\"line\">exists key <span class=\"comment\"># 判断里面有没有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">lset key index element <span class=\"comment\"># 设置key的index下标位置的值为element ，只有存在这个index下标才可以使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">linsert key before|after pivot element <span class=\"comment\"># 在pivot之前或之后插入值</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><p>list实际上一个链表，before Node after，左右都可以插入<br>如果key不存在，创建新的链表<br>如果存在，新增内容<br>如果移除了所有值，空链表，不存在<br>在两边改动效率最高，中间元素效率会低一点<br><strong>消息排队！消息队列，</strong></p>\n<h1 id=\"3、Set\"><a href=\"#3、Set\" class=\"headerlink\" title=\"3、Set\"></a>3、Set</h1><p><strong>set中的值是不能重复的</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sadd key value <span class=\"comment\"># 向set集合中添加</span></span><br><span class=\"line\"></span><br><span class=\"line\">smembers key <span class=\"comment\"># 查看key里面的所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">scard key <span class=\"comment\"># 获取set的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">sismember key value <span class=\"comment\"># 判断value值是否在key中</span></span><br><span class=\"line\"></span><br><span class=\"line\">srem key value <span class=\"comment\"># 移除value元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"comment\"># 无序不重复集合，抽随机</span></span><br><span class=\"line\"></span><br><span class=\"line\">srandmember myset count <span class=\"comment\"># 随机抽出指定个数元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">spop key count <span class=\"comment\"># 随机删除一些set集合中的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">smove <span class=\"built_in\">source</span> destination <span class=\"comment\"># 将一个集合中的元素移动到另一个集合中</span></span><br><span class=\"line\"></span><br><span class=\"line\">数字集合类：</span><br><span class=\"line\"> - 差集 sdiff key1 key2</span><br><span class=\"line\"> - 交集 sinter key1 key2 <span class=\"comment\"># 共同好友就可以这样实现</span></span><br><span class=\"line\"> - 并集 sunion key1 key2 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>共同关注，共同爱好，二度好友</p>\n<h1 id=\"4、Hsah\"><a href=\"#4、Hsah\" class=\"headerlink\" title=\"4、Hsah\"></a>4、Hsah</h1><p>Map集合，key-,key-map,这时候这个值是一个map集合，本质和string没有太大区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hset key filed value [field value] <span class=\"comment\"># 存放hash As of Redis 4.0.0, HSET is variadic and allows for multiple field/value pairs.</span></span><br><span class=\"line\"><span class=\"comment\"># As per Redis 4.0.0, HMSET is considered deprecated. Please use HSET in new code.</span></span><br><span class=\"line\"></span><br><span class=\"line\">hget key field <span class=\"comment\"># 获取key中filed键的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">hgetall key <span class=\"comment\"># 获取所有的键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdel key filed <span class=\"comment\"># 删除hash指定的字段，对应的value也就没有了</span></span><br><span class=\"line\"></span><br><span class=\"line\">hlen key <span class=\"comment\"># 获取hash的内容长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexists key field <span class=\"comment\"># 判断hash中的某个filed是否存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">hkeys key <span class=\"comment\"># 获取hash的所有键（key）</span></span><br><span class=\"line\"></span><br><span class=\"line\">hvals key <span class=\"comment\"># 获取hash的所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">hincrby key filed count <span class=\"comment\"># 自增count</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdecrby key field count  <span class=\"comment\"># 自减</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5、Zset（有序集合）\"><a href=\"#5、Zset（有序集合）\" class=\"headerlink\" title=\"5、Zset（有序集合）\"></a>5、Zset（有序集合）</h1><p>在set的基础上，增加了一个值, zset k1 score1 v1zadd key score value # 添加值，score代表优先级，可以一次添加多个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zrange key start end <span class=\"comment\"># 获取start-end的值，0 -1代表获取所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序如何实现</span></span><br><span class=\"line\">zrangebyscore key startscore endscore <span class=\"comment\"># 对集合通过score排序， 默认升序</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrangebyscore key -inf inf withscores <span class=\"comment\"># 显示score</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrevrange salary 0 -1 [withscores] <span class=\"comment\"># 降序排列所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrem key member [member] <span class=\"comment\"># 移除元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">zcard key <span class=\"comment\"># 获取有序集合中的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">zcount key start end <span class=\"comment\"># 获取start-end之间的个数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多查官方文档\"><a href=\"#多查官方文档\" class=\"headerlink\" title=\"多查官方文档\"></a>多查官方文档</h2><p>案例思路：set 排序 存储班级成绩表，工资表排序</p>\n<p>普通消息：1.重要消息 2.带权重进行判断</p>\n<p>排行榜应用实现，取top n测试</p>\n"},{"title":"Vuex学习","url":"/posts/413c71da/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><img src=\"/../images/logo.png\" alt=\"logo\"></p>\n<h2 id=\"什么是vuex？\"><a href=\"#什么是vuex？\" class=\"headerlink\" title=\"什么是vuex？\"></a>什么是vuex？</h2><p>Vuex 是专门为 Vue.js 设计的状态管理库，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单地说就是采用全局单例模式，将组件的共享状态抽离出来管理，使组件树中的每一个位置都可以获取共享的状态（变量）或者触发行为。</p>\n<p>额，或者更直白的说就是响应式的全局变量</p>\n<h2 id=\"vuex核心概念\"><a href=\"#vuex核心概念\" class=\"headerlink\" title=\"vuex核心概念\"></a>vuex核心概念</h2><table>\n<thead>\n<tr>\n<th>State</th>\n<th>共享状态（即变量）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Getter</td>\n<td>基于state的派生状态，可理解为组件中的计算属性</td>\n</tr>\n<tr>\n<td>Mutation</td>\n<td>更改vuex的store中状态的唯一方法，通过提交mutation修改状态，同步操作（规则上是不允许异步操作的，虽然异步也可以执行，但是对devtool调试的状态跟踪或多个状态更改操作相互依赖是很不好的，所以不要觉得只要不报错我就可以这么用，还是尽量按照规则来比较好）</td>\n</tr>\n<tr>\n<td>Action</td>\n<td>类似mutation，不同之处，1.通过提交mutation修改状态  2.支持异步操作</td>\n</tr>\n<tr>\n<td>Module</td>\n<td>模块，在大型项目中为了方便状态的管理和协作开发将store拆分为多个子模块（modules），每个子模块拥有完整的state、mutation、action、getter</td>\n</tr>\n</tbody></table>\n<h2 id=\"vuex安装与使用\"><a href=\"#vuex安装与使用\" class=\"headerlink\" title=\"vuex安装与使用\"></a>vuex安装与使用</h2><p>1.安装vuex（命令）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vuex --save     // 如果安装了淘宝镜像，可以使用 cnpm安装</span><br></pre></td></tr></table></figure>","categories":["Vue"],"tags":["Vuex"]},{"title":"git常用命令","url":"/posts/423abe9e/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"撤销对文件的修改\"><a href=\"#撤销对文件的修改\" class=\"headerlink\" title=\"撤销对文件的修改\"></a>撤销对文件的修改</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout --  index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"取消暂存的文件\"><a href=\"#取消暂存的文件\" class=\"headerlink\" title=\"取消暂存的文件\"></a>取消暂存的文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset HEAD index.html</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"跳过暂存区直接提交到仓库\"><a href=\"#跳过暂存区直接提交到仓库\" class=\"headerlink\" title=\"跳过暂存区直接提交到仓库\"></a>跳过暂存区直接提交到仓库</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看已加入本地仓库的文件\"><a href=\"#查看已加入本地仓库的文件\" class=\"headerlink\" title=\"查看已加入本地仓库的文件\"></a>查看已加入本地仓库的文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git ls-files</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h1><h3 id=\"从git仓库和工作区间同时移除index-html文件\"><a href=\"#从git仓库和工作区间同时移除index-html文件\" class=\"headerlink\" title=\"从git仓库和工作区间同时移除index.html文件\"></a>从git仓库和工作区间同时移除index.html文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm -f index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"只从git仓库中移除index-html-但保留工作区中的-index-html\"><a href=\"#只从git仓库中移除index-html-但保留工作区中的-index-html\" class=\"headerlink\" title=\"只从git仓库中移除index.html 但保留工作区中的 index.html\"></a>只从git仓库中移除index.html 但保留工作区中的 index.html</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm --cached index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除test文件夹流程\"><a href=\"#删除test文件夹流程\" class=\"headerlink\" title=\"删除test文件夹流程\"></a>删除test文件夹流程</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.将远程仓库里面的项目拉下来</span><br><span class=\"line\"></span><br><span class=\"line\">$git pull origin main</span><br><span class=\"line\"></span><br><span class=\"line\">2.删除test文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">$git rm -f --cached test</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交，添加说明</span><br><span class=\"line\"></span><br><span class=\"line\">$git commit -m &quot;删除test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">5.将本次更改更新到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">$git push</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"忽略文件-gitignore\"><a href=\"#忽略文件-gitignore\" class=\"headerlink\" title=\"忽略文件.gitignore\"></a>忽略文件.gitignore</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.以#开头的是注释</span><br><span class=\"line\"></span><br><span class=\"line\">2.以/结尾的是目录</span><br><span class=\"line\"></span><br><span class=\"line\">3.以/开头的是防止递归</span><br><span class=\"line\"></span><br><span class=\"line\">4.以!开头的是表示取反</span><br><span class=\"line\"></span><br><span class=\"line\">5.可以使用glob模式进行文件夹和文件的匹配</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"glob模式是指简化可的正则表达式\"><a href=\"#glob模式是指简化可的正则表达式\" class=\"headerlink\" title=\"glob模式是指简化可的正则表达式\"></a>glob模式是指简化可的正则表达式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.星号* 2.[abc] 3.问号? 4.两个星号**</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"gitignore文件的例子\"><a href=\"#gitignore文件的例子\" class=\"headerlink\" title=\".gitignore文件的例子\"></a>.gitignore文件的例子</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#忽略所有的.a文件</span><br><span class=\"line\"></span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\">#但跟踪所有的lib.a文件，即使你在前面忽略了.a文件</span><br><span class=\"line\"></span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\">#只忽略当前目录下的TODO文件，而不忽略subdir/TODO</span><br><span class=\"line\"></span><br><span class=\"line\">/TODO </span><br><span class=\"line\"></span><br><span class=\"line\">#忽略任何目录下名为build的文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\">#忽略doc/notes/txt ，但不忽略 doc/server/arch.txt</span><br><span class=\"line\"></span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\">#忽略doc/目录及其所有子目录下的.pdf文件</span><br><span class=\"line\"></span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h1><blockquote>\n<p>按时间先后顺序列出所有的提交历史，最近的提交排在最上面</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>只展示最新的两条提交历史,数字可以按需填写</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在一行上展示最近两条提交的历史信息</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在一行上展示最近的两条提交历史信息-并自定义输出的格式\"><a href=\"#在一行上展示最近的两条提交历史信息-并自定义输出的格式\" class=\"headerlink\" title=\"在一行上展示最近的两条提交历史信息,并自定义输出的格式\"></a>在一行上展示最近的两条提交历史信息,并自定义输出的格式</h3><blockquote>\n<p> %h 提交的简写哈希值 %an 作者名字  %ar 作者修订日期，按多久以前的方式显示  %s 提交说明 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"回退到指定的版本\"><a href=\"#回退到指定的版本\" class=\"headerlink\" title=\"回退到指定的版本\"></a>回退到指定的版本</h1><h3 id=\"在一行上展示所有的提交历史\"><a href=\"#在一行上展示所有的提交历史\" class=\"headerlink\" title=\"在一行上展示所有的提交历史\"></a>在一行上展示所有的提交历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用git-reset-–hard-命令，根据指定的提交ID-回退到指定的版本\"><a href=\"#使用git-reset-–hard-命令，根据指定的提交ID-回退到指定的版本\" class=\"headerlink\" title=\"使用git reset –hard 命令，根据指定的提交ID 回退到指定的版本\"></a>使用git reset –hard 命令，根据指定的提交ID 回退到指定的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在旧版本中使用-git-reflog-–pretty-x3D-oneline-命令，查看命令操作的历史\"><a href=\"#在旧版本中使用-git-reflog-–pretty-x3D-oneline-命令，查看命令操作的历史\" class=\"headerlink\" title=\"在旧版本中使用 git reflog –pretty&#x3D;oneline 命令，查看命令操作的历史\"></a>在旧版本中使用 git reflog –pretty&#x3D;oneline 命令，查看命令操作的历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reflog --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"再次根据最新的提交ID-跳转到最新的版本\"><a href=\"#再次根据最新的提交ID-跳转到最新的版本\" class=\"headerlink\" title=\"再次根据最新的提交ID 跳转到最新的版本\"></a>再次根据最新的提交ID 跳转到最新的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>主分支上不进行代码开发，已经开发完成的功能分支会在合并后结束生命</p>\n<h2 id=\"查看所有分支的命令\"><a href=\"#查看所有分支的命令\" class=\"headerlink\" title=\"查看所有分支的命令\"></a>查看所有分支的命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch   -a</span><br><span class=\"line\"></span><br><span class=\"line\">所在分支前会有*标识</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">执行完后  还是处在当前分支，并未到达新建分支 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分支的快速创建和切换\"><a href=\"#分支的快速创建和切换\" class=\"headerlink\" title=\"分支的快速创建和切换\"></a>分支的快速创建和切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">实际就是是  git branch 分支名  git branch 分支名  这两条命令的合并</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支时总是以主分支为基础来进行创建和切换分支 </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.先切换到main分支：git checkout main</span><br><span class=\"line\"></span><br><span class=\"line\">2.在main上运行git merge test命令 将test 分支上的代码合并到main分支</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1。假设在test分支合并到main期间，代码发生了冲突</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout main</span><br><span class=\"line\"></span><br><span class=\"line\">git merge test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.打开包含冲突的文件，手动解决后，再执行如下命令</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;解决了分支合并冲突的问题&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"远程分支操作\"><a href=\"#远程分支操作\" class=\"headerlink\" title=\"远程分支操作\"></a>远程分支操作</h1><h2 id=\"第一次把本地分支推送到远程仓库，需要运行如下命令\"><a href=\"#第一次把本地分支推送到远程仓库，需要运行如下命令\" class=\"headerlink\" title=\"第一次把本地分支推送到远程仓库，需要运行如下命令\"></a>第一次把本地分支推送到远程仓库，需要运行如下命令</h2><h3 id=\"只在第一次推送的时候需要加-u-参数：-u-表示把本地分支和远程分支进行关联\"><a href=\"#只在第一次推送的时候需要加-u-参数：-u-表示把本地分支和远程分支进行关联\" class=\"headerlink\" title=\"只在第一次推送的时候需要加 -u 参数：-u 表示把本地分支和远程分支进行关联\"></a>只在第一次推送的时候需要加 -u 参数：-u 表示把本地分支和远程分支进行关联</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  push -u  远程仓库名别名  本地分支名:远程分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin payment:pay</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\"><a href=\"#如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\" class=\"headerlink\" title=\"如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\"></a>如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin payment </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"查看远程仓库中所有的分支列表\"><a href=\"#查看远程仓库中所有的分支列表\" class=\"headerlink\" title=\"查看远程仓库中所有的分支列表\"></a>查看远程仓库中所有的分支列表</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote show 远程仓库名</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"跟踪分支\"><a href=\"#跟踪分支\" class=\"headerlink\" title=\"跟踪分支\"></a>跟踪分支</h1><h3 id=\"是指从远程仓库中-，把远程分支下载到本地仓库中。命令如下：\"><a href=\"#是指从远程仓库中-，把远程分支下载到本地仓库中。命令如下：\" class=\"headerlink\" title=\"是指从远程仓库中 ，把远程分支下载到本地仓库中。命令如下：\"></a>是指从远程仓库中 ，把远程分支下载到本地仓库中。命令如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.把对应的而远程分支下载到本地仓库，保持本地分支和远程分支名称相同：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout  远程分支名     示例： git  checkout  pay</span><br><span class=\"line\"></span><br><span class=\"line\">2.把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名：</span><br><span class=\"line\"></span><br><span class=\"line\">git  checkout  -b  本地分支名  远程仓库名/远程分支名</span><br><span class=\"line\"></span><br><span class=\"line\">示例：git  checkout -b payment  origin/pay</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"拉取远程分支最新代码\"><a href=\"#拉取远程分支最新代码\" class=\"headerlink\" title=\"拉取远程分支最新代码\"></a>拉取远程分支最新代码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  pull </span><br><span class=\"line\"></span><br><span class=\"line\">更新当前分支与远程 分支保持一致</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"删除远程仓库指定分支\"><a href=\"#删除远程仓库指定分支\" class=\"headerlink\" title=\"删除远程仓库指定分支\"></a>删除远程仓库指定分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  push   远程仓库名 --delete  远程分支名称</span><br><span class=\"line\"></span><br><span class=\"line\">示例：git  push  origin  --delete pay</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除本地分支-1\"><a href=\"#删除本地分支-1\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">没被合并的分支 在执行删除操作时会报error    run&#x27;git branch -D 分支名&#x27;</span><br></pre></td></tr></table></figure>\n\n\n","categories":["Java"],"tags":["git"]},{"title":"前端js打印table","url":"/posts/3af5528f/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Js代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印表格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> idTmr;  </span><br><span class=\"line\"><span class=\"keyword\">function</span>  <span class=\"title function_\">getExplorer</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> explorer = <span class=\"variable language_\">window</span>.<span class=\"property\">navigator</span>.<span class=\"property\">userAgent</span> ;  </span><br><span class=\"line\">    <span class=\"comment\">//ie  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;MSIE&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ie&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//firefox  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Firefox&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Firefox&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Chrome  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Chrome&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Chrome&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Opera  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Opera&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Opera&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Safari  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Safari&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Safari&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">method5</span>(<span class=\"params\">tableid</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">getExplorer</span>() == <span class=\"string\">&#x27;ie&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> curTbl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(tableid);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> oXL = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Excel.Application&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> oWB = oXL.<span class=\"property\">Workbooks</span>.<span class=\"title class_\">Add</span>();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> xlsheet = oWB.<span class=\"title class_\">Worksheets</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> sel = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">createTextRange</span>();</span><br><span class=\"line\">            sel.<span class=\"title function_\">moveToElementText</span>(curTbl);</span><br><span class=\"line\">            sel.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">            sel.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&quot;Copy&quot;</span>);</span><br><span class=\"line\">            xlsheet.<span class=\"title class_\">Paste</span>();</span><br><span class=\"line\">            oXL.<span class=\"property\">Visible</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fname = oXL.<span class=\"property\">Application</span>.<span class=\"title class_\">GetSaveAsFilename</span>(<span class=\"string\">&quot;Excel.xls&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Excel Spreadsheets (*.xls), *.xls&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">print</span>(<span class=\"string\">&quot;Nested catch caught &quot;</span> + e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                oWB.<span class=\"title class_\">SaveAs</span>(fname);</span><br><span class=\"line\">                oWB.<span class=\"title class_\">Close</span>(savechanges = <span class=\"literal\">false</span>);</span><br><span class=\"line\">                oXL.<span class=\"title class_\">Quit</span>();</span><br><span class=\"line\">                oXL = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                idTmr = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"string\">&quot;Cleanup();&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">tableToExcel</span>(tableid)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Cleanup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(idTmr);</span><br><span class=\"line\">        <span class=\"title class_\">CollectGarbage</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tableToExcel = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> uri = <span class=\"string\">&#x27;data:application/vnd.ms-excel;base64,&#x27;</span>, template = <span class=\"string\">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;table  border=&quot;1&quot;&gt;&#123;table&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>, base64 = <span class=\"keyword\">function</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                s</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">btoa</span>(<span class=\"built_in\">unescape</span>(<span class=\"built_in\">encodeURIComponent</span>(s)))</span><br><span class=\"line\">        &#125;, format = <span class=\"keyword\">function</span>(<span class=\"params\">s, c</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&#123;(\\w+)&#125;/g</span>, <span class=\"keyword\">function</span>(<span class=\"params\">m, p</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c[p];</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">table, name</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!table.<span class=\"property\">nodeType</span>)</span><br><span class=\"line\">                table = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(table)</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctx = &#123;</span><br><span class=\"line\">                worksheet : name || <span class=\"string\">&#x27;Worksheet&#x27;</span>,</span><br><span class=\"line\">                table : table.<span class=\"property\">innerHTML</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = uri + <span class=\"title function_\">base64</span>(<span class=\"title function_\">format</span>(template, ctx))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>*<strong>末尾的括号不能省*</strong></p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"异步、定时、邮件任务","url":"/posts/a60ba49d/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>异步任务<br>1、创建一个service包</p>\n<p>2、创建一个类AsyncService</p>\n<p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p>\n<p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;业务进行中....&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写controller包</p>\n<p>4、编写AsyncController类</p>\n<p>我们去写一个Controller测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       asyncService.hello();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、访问<a href=\"http://localhost/\">http://localhost</a>:8080&#x2F;hello进行测试，3秒后出现success，这是同步等待的情况。</p>\n<p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p>\n<p>6、给hello方法添加@Async注解；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉Spring这是一个异步方法</span></span><br><span class=\"line\"><span class=\"meta\">@Async</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">       e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   System.out.println(<span class=\"string\">&quot;业务进行中....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAsync</span> <span class=\"comment\">//开启异步注解功能</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootTaskApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>\n<p>定时任务<br>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p>\n<p>TaskExecutor接口</p>\n<p>TaskScheduler接口</p>\n<p>两个注解：</p>\n<p>@EnableScheduling</p>\n<p>@Scheduled</p>\n<p>cron表达式：</p>\n<p>图片</p>\n<p>图片</p>\n<p>测试步骤：</p>\n<p>1、创建一个ScheduledService</p>\n<p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScheduledService</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//秒   分   时     日   月   周几</span></span><br><span class=\"line\">   <span class=\"comment\">//0 * * * * MON-FRI</span></span><br><span class=\"line\">   <span class=\"comment\">//注意cron表达式的用法；</span></span><br><span class=\"line\">   <span class=\"meta\">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;hello.....&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAsync</span> <span class=\"comment\">//开启异步注解功能</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span> <span class=\"comment\">//开启基于注解的定时任务</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootTaskApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、我们来详细了解下cron表达式；</p>\n<p><a href=\"http://www.bejson.com/othertools/cron/\">http://www.bejson.com/othertools/cron/</a></p>\n<p>4、常用的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">（1）0/2     ?   表示每2秒 执行任务</span><br><span class=\"line\">（1）0 0/2   * ?   表示每2分钟 执行任务</span><br><span class=\"line\">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class=\"line\">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class=\"line\">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class=\"line\">（4）0 0 10,14,16   ?   每天上午10点，下午2点，4点</span><br><span class=\"line\">（5）0 0/30 9-17   ?   朝九晚五工作时间内每半小时</span><br><span class=\"line\">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class=\"line\">（7）0 0 12   ?   每天中午12点触发</span><br><span class=\"line\">（8）0 15 10 ?     每天上午10:15触发</span><br><span class=\"line\">（9）0 15 10   ?     每天上午10:15触发</span><br><span class=\"line\">（10）0 15 10   ?   每天上午10:15触发</span><br><span class=\"line\">（11）0 15 10   ? 2005   2005年的每天上午10:15触发</span><br><span class=\"line\">（12）0  *14*  * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class=\"line\">（13）0 0/5 14   ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class=\"line\">（14）0 0/5 14,18   ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class=\"line\">（15）0 0-5 14   ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class=\"line\">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class=\"line\">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class=\"line\">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class=\"line\">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class=\"line\">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>\n\n<p>邮件任务<br>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>\n<p>邮件发送需要引入spring-boot-start-mail</p>\n<p>SpringBoot 自动配置MailSenderAutoConfiguration</p>\n<p>定义MailProperties内容，配置在application.yml中</p>\n<p>自动装配JavaMailSender</p>\n<p>测试邮件发送</p>\n<p>测试：</p>\n<p>1、引入pom依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>看它引入的依赖，可以看到 jakarta.mail</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jakarta.mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、查看自动配置类：MailSenderAutoConfiguration</p>\n<p>图片</p>\n<p>这个类中存在bean，JavaMailSenderImpl</p>\n<p>图片</p>\n<p>然后我们去看下配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(</span></span><br><span class=\"line\"><span class=\"meta\">   prefix = &quot;spring.mail&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MailProperties</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_CHARSET;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Integer port;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">protocol</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;smtp&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Charset defaultEncoding;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Map&lt;String, String&gt; properties;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String jndiName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.mail.username=24736743@qq.com</span></span><br><span class=\"line\"><span class=\"string\">spring.mail.password=你的qq授权码</span></span><br><span class=\"line\"><span class=\"string\">spring.mail.host=smtp.qq.com</span></span><br><span class=\"line\"><span class=\"comment\"># qq需要配置ssl</span></span><br><span class=\"line\"><span class=\"string\">spring.mail.properties.mail.smtp.ssl.enable=true</span></span><br></pre></td></tr></table></figure>\n\n<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p>\n<p>图片</p>\n<p>4、Spring单元测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">JavaMailSenderImpl mailSender;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//邮件设置1：一个简单的邮件</span></span><br><span class=\"line\">   <span class=\"type\">SimpleMailMessage</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleMailMessage</span>();</span><br><span class=\"line\">   message.setSubject(<span class=\"string\">&quot;通知-明天来狂神这听课&quot;</span>);</span><br><span class=\"line\">   message.setText(<span class=\"string\">&quot;今晚7:30开会&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   message.setTo(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\">   message.setFrom(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\">   mailSender.send(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MessagingException &#123;</span><br><span class=\"line\">   <span class=\"comment\">//邮件设置2：一个复杂的邮件</span></span><br><span class=\"line\">   <span class=\"type\">MimeMessage</span> <span class=\"variable\">mimeMessage</span> <span class=\"operator\">=</span> mailSender.createMimeMessage();</span><br><span class=\"line\">   <span class=\"type\">MimeMessageHelper</span> <span class=\"variable\">helper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessageHelper</span>(mimeMessage, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   helper.setSubject(<span class=\"string\">&quot;通知-明天来狂神这听课&quot;</span>);</span><br><span class=\"line\">   helper.setText(<span class=\"string\">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//发送附件</span></span><br><span class=\"line\">   helper.addAttachment(<span class=\"string\">&quot;1.jpg&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">   helper.addAttachment(<span class=\"string\">&quot;2.jpg&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   helper.setTo(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\">   helper.setFrom(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   mailSender.send(mimeMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看邮箱，邮件接收成功！</p>\n<p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p>\n","categories":["Java"],"tags":["SpringBoot"]},{"title":"Hello World","url":"/posts/4a17b156/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Vue学习","url":"/posts/317b894e/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"Vue生命周期\"><a href=\"#Vue生命周期\" class=\"headerlink\" title=\"Vue生命周期\"></a>Vue生命周期</h1><p><img src=\"/../images/lifecycle.png\" alt=\"lifecycle\"></p>\n<h1 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a><a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h1><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> attribute 甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中。</p>\n<h1 id=\"Vue中的is属性，及子组件的data\"><a href=\"#Vue中的is属性，及子组件的data\" class=\"headerlink\" title=\"Vue中的is属性，及子组件的data\"></a>Vue中的is属性，及子组件的data</h1><h2 id=\"1、is属性\"><a href=\"#1、is属性\" class=\"headerlink\" title=\"1、is属性\"></a>1、is属性</h2><p>根据HTML规范，<table>、<ul>、<ol>、<select>等元素只能包含特定元素，当模板标签在使用有限制性的元素，在渲染时就会出现bug。如下例所示：</p>\n<pre><code>&lt;div id=&quot;root&quot;&gt;\n    &lt;table&gt;\n        &lt;tbody&gt;\n        &lt;row&gt;&lt;/row&gt;\n        &lt;row&gt;&lt;/row&gt;\n        &lt;row&gt;&lt;/row&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    Vue.component(&#39;row&#39;,&#123;\n        template: &#39;&lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt;&#39;\n    &#125;)\n    var vm=new Vue(&#123;\n        el: &quot;#root&quot;\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>渲染结果如下： </p>\n<p>​\t<img src=\"/../images/image-20220501155514272.png\" alt=\"image-20220501155514272\"></p>\n<p>渲染完成后，tr元素放在了table元素的外部。因为tbody元素内部只能放tr标签，上例在t<able>内部写了<row>标签就会引发bug。引入is属性后上例中DOM部分可以这样写</p>\n <table>\n        <tbody>\n            <tr is=\"row\"></tr>\n            <tr is=\"row\"></tr>\n            <tr is=\"row\"></tr>\n        </tbody>\n        </table>\n\n<p>这样，便可以正确的渲染：</p>\n<p><img src=\"/../images/image-20220501155547910.png\" alt=\"image-20220501155547910\"></p>\n<h2 id=\"2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。\"><a href=\"#2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。\" class=\"headerlink\" title=\"2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。\"></a>2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。</h2>","categories":["Vue"],"tags":["Vue"]}]