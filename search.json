[{"title":"Hello World","url":"/2022/04/29/hello-world/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"git常用命令","url":"/2022/04/29/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"撤销对文件的修改\"><a href=\"#撤销对文件的修改\" class=\"headerlink\" title=\"撤销对文件的修改\"></a>撤销对文件的修改</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout --  index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"取消暂存的文件\"><a href=\"#取消暂存的文件\" class=\"headerlink\" title=\"取消暂存的文件\"></a>取消暂存的文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset HEAD index.html</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"跳过暂存区直接提交到仓库\"><a href=\"#跳过暂存区直接提交到仓库\" class=\"headerlink\" title=\"跳过暂存区直接提交到仓库\"></a>跳过暂存区直接提交到仓库</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看已加入本地仓库的文件\"><a href=\"#查看已加入本地仓库的文件\" class=\"headerlink\" title=\"查看已加入本地仓库的文件\"></a>查看已加入本地仓库的文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git ls-files</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h1><h3 id=\"从git仓库和工作区间同时移除index-html文件\"><a href=\"#从git仓库和工作区间同时移除index-html文件\" class=\"headerlink\" title=\"从git仓库和工作区间同时移除index.html文件\"></a>从git仓库和工作区间同时移除index.html文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm -f index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"只从git仓库中移除index-html-但保留工作区中的-index-html\"><a href=\"#只从git仓库中移除index-html-但保留工作区中的-index-html\" class=\"headerlink\" title=\"只从git仓库中移除index.html 但保留工作区中的 index.html\"></a>只从git仓库中移除index.html 但保留工作区中的 index.html</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm --cached index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除test文件夹流程\"><a href=\"#删除test文件夹流程\" class=\"headerlink\" title=\"删除test文件夹流程\"></a>删除test文件夹流程</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.将远程仓库里面的项目拉下来</span><br><span class=\"line\"></span><br><span class=\"line\">$git pull origin main</span><br><span class=\"line\"></span><br><span class=\"line\">2.删除test文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">$git rm -f --cached test</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交，添加说明</span><br><span class=\"line\"></span><br><span class=\"line\">$git commit -m &quot;删除test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">5.将本次更改更新到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">$git push</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"忽略文件-gitignore\"><a href=\"#忽略文件-gitignore\" class=\"headerlink\" title=\"忽略文件.gitignore\"></a>忽略文件.gitignore</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.以#开头的是注释</span><br><span class=\"line\"></span><br><span class=\"line\">2.以/结尾的是目录</span><br><span class=\"line\"></span><br><span class=\"line\">3.以/开头的是防止递归</span><br><span class=\"line\"></span><br><span class=\"line\">4.以!开头的是表示取反</span><br><span class=\"line\"></span><br><span class=\"line\">5.可以使用glob模式进行文件夹和文件的匹配</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"glob模式是指简化可的正则表达式\"><a href=\"#glob模式是指简化可的正则表达式\" class=\"headerlink\" title=\"glob模式是指简化可的正则表达式\"></a>glob模式是指简化可的正则表达式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.星号* 2.[abc] 3.问号? 4.两个星号**</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"gitignore文件的例子\"><a href=\"#gitignore文件的例子\" class=\"headerlink\" title=\".gitignore文件的例子\"></a>.gitignore文件的例子</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#忽略所有的.a文件</span><br><span class=\"line\"></span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\">#但跟踪所有的lib.a文件，即使你在前面忽略了.a文件</span><br><span class=\"line\"></span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\">#只忽略当前目录下的TODO文件，而不忽略subdir/TODO</span><br><span class=\"line\"></span><br><span class=\"line\">/TODO </span><br><span class=\"line\"></span><br><span class=\"line\">#忽略任何目录下名为build的文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\">#忽略doc/notes/txt ，但不忽略 doc/server/arch.txt</span><br><span class=\"line\"></span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\">#忽略doc/目录及其所有子目录下的.pdf文件</span><br><span class=\"line\"></span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h1><blockquote>\n<p>按时间先后顺序列出所有的提交历史，最近的提交排在最上面</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>只展示最新的两条提交历史,数字可以按需填写</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在一行上展示最近两条提交的历史信息</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在一行上展示最近的两条提交历史信息-并自定义输出的格式\"><a href=\"#在一行上展示最近的两条提交历史信息-并自定义输出的格式\" class=\"headerlink\" title=\"在一行上展示最近的两条提交历史信息,并自定义输出的格式\"></a>在一行上展示最近的两条提交历史信息,并自定义输出的格式</h3><blockquote>\n<p> %h 提交的简写哈希值 %an 作者名字  %ar 作者修订日期，按多久以前的方式显示  %s 提交说明 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"回退到指定的版本\"><a href=\"#回退到指定的版本\" class=\"headerlink\" title=\"回退到指定的版本\"></a>回退到指定的版本</h1><h3 id=\"在一行上展示所有的提交历史\"><a href=\"#在一行上展示所有的提交历史\" class=\"headerlink\" title=\"在一行上展示所有的提交历史\"></a>在一行上展示所有的提交历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用git-reset-–hard-命令，根据指定的提交ID-回退到指定的版本\"><a href=\"#使用git-reset-–hard-命令，根据指定的提交ID-回退到指定的版本\" class=\"headerlink\" title=\"使用git reset –hard 命令，根据指定的提交ID 回退到指定的版本\"></a>使用git reset –hard 命令，根据指定的提交ID 回退到指定的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在旧版本中使用-git-reflog-–pretty-x3D-oneline-命令，查看命令操作的历史\"><a href=\"#在旧版本中使用-git-reflog-–pretty-x3D-oneline-命令，查看命令操作的历史\" class=\"headerlink\" title=\"在旧版本中使用 git reflog –pretty&#x3D;oneline 命令，查看命令操作的历史\"></a>在旧版本中使用 git reflog –pretty&#x3D;oneline 命令，查看命令操作的历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reflog --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"再次根据最新的提交ID-跳转到最新的版本\"><a href=\"#再次根据最新的提交ID-跳转到最新的版本\" class=\"headerlink\" title=\"再次根据最新的提交ID 跳转到最新的版本\"></a>再次根据最新的提交ID 跳转到最新的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>主分支上不进行代码开发，已经开发完成的功能分支会在合并后结束生命</p>\n<h2 id=\"查看所有分支的命令\"><a href=\"#查看所有分支的命令\" class=\"headerlink\" title=\"查看所有分支的命令\"></a>查看所有分支的命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch   -a</span><br><span class=\"line\"></span><br><span class=\"line\">所在分支前会有*标识</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">执行完后  还是处在当前分支，并未到达新建分支 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分支的快速创建和切换\"><a href=\"#分支的快速创建和切换\" class=\"headerlink\" title=\"分支的快速创建和切换\"></a>分支的快速创建和切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">实际就是是  git branch 分支名  git branch 分支名  这两条命令的合并</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支时总是以主分支为基础来进行创建和切换分支 </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.先切换到main分支：git checkout main</span><br><span class=\"line\"></span><br><span class=\"line\">2.在main上运行git merge test命令 将test 分支上的代码合并到main分支</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1。假设在test分支合并到main期间，代码发生了冲突</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout main</span><br><span class=\"line\"></span><br><span class=\"line\">git merge test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.打开包含冲突的文件，手动解决后，再执行如下命令</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;解决了分支合并冲突的问题&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"远程分支操作\"><a href=\"#远程分支操作\" class=\"headerlink\" title=\"远程分支操作\"></a>远程分支操作</h1><h2 id=\"第一次把本地分支推送到远程仓库，需要运行如下命令\"><a href=\"#第一次把本地分支推送到远程仓库，需要运行如下命令\" class=\"headerlink\" title=\"第一次把本地分支推送到远程仓库，需要运行如下命令\"></a>第一次把本地分支推送到远程仓库，需要运行如下命令</h2><h3 id=\"只在第一次推送的时候需要加-u-参数：-u-表示把本地分支和远程分支进行关联\"><a href=\"#只在第一次推送的时候需要加-u-参数：-u-表示把本地分支和远程分支进行关联\" class=\"headerlink\" title=\"只在第一次推送的时候需要加 -u 参数：-u 表示把本地分支和远程分支进行关联\"></a>只在第一次推送的时候需要加 -u 参数：-u 表示把本地分支和远程分支进行关联</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  push -u  远程仓库名别名  本地分支名:远程分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin payment:pay</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\"><a href=\"#如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\" class=\"headerlink\" title=\"如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\"></a>如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin payment </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"查看远程仓库中所有的分支列表\"><a href=\"#查看远程仓库中所有的分支列表\" class=\"headerlink\" title=\"查看远程仓库中所有的分支列表\"></a>查看远程仓库中所有的分支列表</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote show 远程仓库名</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"跟踪分支\"><a href=\"#跟踪分支\" class=\"headerlink\" title=\"跟踪分支\"></a>跟踪分支</h1><h3 id=\"是指从远程仓库中-，把远程分支下载到本地仓库中。命令如下：\"><a href=\"#是指从远程仓库中-，把远程分支下载到本地仓库中。命令如下：\" class=\"headerlink\" title=\"是指从远程仓库中 ，把远程分支下载到本地仓库中。命令如下：\"></a>是指从远程仓库中 ，把远程分支下载到本地仓库中。命令如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.把对应的而远程分支下载到本地仓库，保持本地分支和远程分支名称相同：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout  远程分支名     示例： git  checkout  pay</span><br><span class=\"line\"></span><br><span class=\"line\">2.把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名：</span><br><span class=\"line\"></span><br><span class=\"line\">git  checkout  -b  本地分支名  远程仓库名/远程分支名</span><br><span class=\"line\"></span><br><span class=\"line\">示例：git  checkout -b payment  origin/pay</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"拉取远程分支最新代码\"><a href=\"#拉取远程分支最新代码\" class=\"headerlink\" title=\"拉取远程分支最新代码\"></a>拉取远程分支最新代码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  pull </span><br><span class=\"line\"></span><br><span class=\"line\">更新当前分支与远程 分支保持一致</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"删除远程仓库指定分支\"><a href=\"#删除远程仓库指定分支\" class=\"headerlink\" title=\"删除远程仓库指定分支\"></a>删除远程仓库指定分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  push   远程仓库名 --delete  远程分支名称</span><br><span class=\"line\"></span><br><span class=\"line\">示例：git  push  origin  --delete pay</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除本地分支-1\"><a href=\"#删除本地分支-1\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">没被合并的分支 在执行删除操作时会报error    run&#x27;git branch -D 分支名&#x27;</span><br></pre></td></tr></table></figure>\n\n\n","categories":["Java"],"tags":["git"]},{"title":"Vuex学习","url":"/2022/04/29/Vuex%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><img src=\"/../images/logo.png\" alt=\"logo\"></p>\n<h2 id=\"什么是vuex？\"><a href=\"#什么是vuex？\" class=\"headerlink\" title=\"什么是vuex？\"></a>什么是vuex？</h2><p>Vuex 是专门为 Vue.js 设计的状态管理库，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单地说就是采用全局单例模式，将组件的共享状态抽离出来管理，使组件树中的每一个位置都可以获取共享的状态（变量）或者触发行为。</p>\n<p>额，或者更直白的说就是响应式的全局变量</p>\n<h2 id=\"vuex核心概念\"><a href=\"#vuex核心概念\" class=\"headerlink\" title=\"vuex核心概念\"></a>vuex核心概念</h2><table>\n<thead>\n<tr>\n<th>State</th>\n<th>共享状态（即变量）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Getter</td>\n<td>基于state的派生状态，可理解为组件中的计算属性</td>\n</tr>\n<tr>\n<td>Mutation</td>\n<td>更改vuex的store中状态的唯一方法，通过提交mutation修改状态，同步操作（规则上是不允许异步操作的，虽然异步也可以执行，但是对devtool调试的状态跟踪或多个状态更改操作相互依赖是很不好的，所以不要觉得只要不报错我就可以这么用，还是尽量按照规则来比较好）</td>\n</tr>\n<tr>\n<td>Action</td>\n<td>类似mutation，不同之处，1.通过提交mutation修改状态  2.支持异步操作</td>\n</tr>\n<tr>\n<td>Module</td>\n<td>模块，在大型项目中为了方便状态的管理和协作开发将store拆分为多个子模块（modules），每个子模块拥有完整的state、mutation、action、getter</td>\n</tr>\n</tbody></table>\n<h2 id=\"vuex安装与使用\"><a href=\"#vuex安装与使用\" class=\"headerlink\" title=\"vuex安装与使用\"></a>vuex安装与使用</h2><p>1.安装vuex（命令）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vuex --save     // 如果安装了淘宝镜像，可以使用 cnpm安装</span><br></pre></td></tr></table></figure>","categories":["Vue"],"tags":["Vuex"]},{"title":"异步、定时、邮件任务","url":"/2022/01/10/%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>异步任务<br>1、创建一个service包</p>\n<p>2、创建一个类AsyncService</p>\n<p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p>\n<p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class AsyncService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void hello()&#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           Thread.sleep(3000);</span><br><span class=\"line\">      &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       System.out.println(&quot;业务进行中....&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写controller包</p>\n<p>4、编写AsyncController类</p>\n<p>我们去写一个Controller测试一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class AsyncController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">   AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\">   @GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">   public String hello()&#123;</span><br><span class=\"line\">       asyncService.hello();</span><br><span class=\"line\">       return &quot;success&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、访问<a href=\"http://localhost/\">http://localhost</a>:8080&#x2F;hello进行测试，3秒后出现success，这是同步等待的情况。</p>\n<p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p>\n<p>6、给hello方法添加@Async注解；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//告诉Spring这是一个异步方法</span><br><span class=\"line\">@Async</span><br><span class=\"line\">public void hello()&#123;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       Thread.sleep(3000);</span><br><span class=\"line\">  &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">       e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   System.out.println(&quot;业务进行中....&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@EnableAsync //开启异步注解功能</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class SpringbootTaskApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] args) &#123;</span><br><span class=\"line\">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>\n<p>定时任务<br>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p>\n<p>TaskExecutor接口</p>\n<p>TaskScheduler接口</p>\n<p>两个注解：</p>\n<p>@EnableScheduling</p>\n<p>@Scheduled</p>\n<p>cron表达式：</p>\n<p>图片</p>\n<p>图片</p>\n<p>测试步骤：</p>\n<p>1、创建一个ScheduledService</p>\n<p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class ScheduledService &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   //秒   分   时     日   月   周几</span><br><span class=\"line\">   //0 * * * * MON-FRI</span><br><span class=\"line\">   //注意cron表达式的用法；</span><br><span class=\"line\">   @Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span><br><span class=\"line\">   public void hello()&#123;</span><br><span class=\"line\">       System.out.println(&quot;hello.....&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@EnableAsync //开启异步注解功能</span><br><span class=\"line\">@EnableScheduling //开启基于注解的定时任务</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class SpringbootTaskApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] args) &#123;</span><br><span class=\"line\">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、我们来详细了解下cron表达式；</p>\n<p><a href=\"http://www.bejson.com/othertools/cron/\">http://www.bejson.com/othertools/cron/</a></p>\n<p>4、常用的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">（1）0/2     ?   表示每2秒 执行任务</span><br><span class=\"line\">（1）0 0/2   * ?   表示每2分钟 执行任务</span><br><span class=\"line\">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class=\"line\">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class=\"line\">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class=\"line\">（4）0 0 10,14,16   ?   每天上午10点，下午2点，4点</span><br><span class=\"line\">（5）0 0/30 9-17   ?   朝九晚五工作时间内每半小时</span><br><span class=\"line\">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class=\"line\">（7）0 0 12   ?   每天中午12点触发</span><br><span class=\"line\">（8）0 15 10 ?     每天上午10:15触发</span><br><span class=\"line\">（9）0 15 10   ?     每天上午10:15触发</span><br><span class=\"line\">（10）0 15 10   ?   每天上午10:15触发</span><br><span class=\"line\">（11）0 15 10   ? 2005   2005年的每天上午10:15触发</span><br><span class=\"line\">（12）0  *14*  * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class=\"line\">（13）0 0/5 14   ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class=\"line\">（14）0 0/5 14,18   ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class=\"line\">（15）0 0-5 14   ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class=\"line\">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class=\"line\">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class=\"line\">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class=\"line\">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class=\"line\">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>\n\n<p>邮件任务<br>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>\n<p>邮件发送需要引入spring-boot-start-mail</p>\n<p>SpringBoot 自动配置MailSenderAutoConfiguration</p>\n<p>定义MailProperties内容，配置在application.yml中</p>\n<p>自动装配JavaMailSender</p>\n<p>测试邮件发送</p>\n<p>测试：</p>\n<p>1、引入pom依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>看它引入的依赖，可以看到 jakarta.mail</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;jakarta.mail&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;1.6.4&lt;/version&gt;</span><br><span class=\"line\">   &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2、查看自动配置类：MailSenderAutoConfiguration</p>\n<p>图片</p>\n<p>这个类中存在bean，JavaMailSenderImpl</p>\n<p>图片</p>\n<p>然后我们去看下配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(</span><br><span class=\"line\">   prefix = &quot;spring.mail&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">public class MailProperties &#123;</span><br><span class=\"line\">   private static final Charset DEFAULT_CHARSET;</span><br><span class=\"line\">   private String host;</span><br><span class=\"line\">   private Integer port;</span><br><span class=\"line\">   private String username;</span><br><span class=\"line\">   private String password;</span><br><span class=\"line\">   private String protocol = &quot;smtp&quot;;</span><br><span class=\"line\">   private Charset defaultEncoding;</span><br><span class=\"line\">   private Map&lt;String, String&gt; properties;</span><br><span class=\"line\">   private String jndiName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">spring.mail.username=24736743@qq.com</span><br><span class=\"line\">spring.mail.password=你的qq授权码</span><br><span class=\"line\">spring.mail.host=smtp.qq.com</span><br><span class=\"line\"># qq需要配置ssl</span><br><span class=\"line\">spring.mail.properties.mail.smtp.ssl.enable=true</span><br></pre></td></tr></table></figure>\n\n<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p>\n<p>图片</p>\n<p>4、Spring单元测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">JavaMailSenderImpl mailSender;</span><br><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void contextLoads() &#123;</span><br><span class=\"line\">   //邮件设置1：一个简单的邮件</span><br><span class=\"line\">   SimpleMailMessage message = new SimpleMailMessage();</span><br><span class=\"line\">   message.setSubject(&quot;通知-明天来狂神这听课&quot;);</span><br><span class=\"line\">   message.setText(&quot;今晚7:30开会&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   message.setTo(&quot;24736743@qq.com&quot;);</span><br><span class=\"line\">   message.setFrom(&quot;24736743@qq.com&quot;);</span><br><span class=\"line\">   mailSender.send(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void contextLoads2() throws MessagingException &#123;</span><br><span class=\"line\">   //邮件设置2：一个复杂的邮件</span><br><span class=\"line\">   MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class=\"line\">   MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);</span><br><span class=\"line\"></span><br><span class=\"line\">   helper.setSubject(&quot;通知-明天来狂神这听课&quot;);</span><br><span class=\"line\">   helper.setText(&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;,true);</span><br><span class=\"line\"></span><br><span class=\"line\">   //发送附件</span><br><span class=\"line\">   helper.addAttachment(&quot;1.jpg&quot;,new File(&quot;&quot;));</span><br><span class=\"line\">   helper.addAttachment(&quot;2.jpg&quot;,new File(&quot;&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">   helper.setTo(&quot;24736743@qq.com&quot;);</span><br><span class=\"line\">   helper.setFrom(&quot;24736743@qq.com&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   mailSender.send(mimeMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看邮箱，邮件接收成功！</p>\n<p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p>\n","categories":["Java"],"tags":["SpringBoot"]},{"title":"前端js打印table","url":"/2021/12/22/%E5%89%8D%E7%AB%AFjs%E6%89%93%E5%8D%B0table/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Js代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//打印表格</span><br><span class=\"line\">var idTmr;  </span><br><span class=\"line\">function  getExplorer() &#123;  </span><br><span class=\"line\">    var explorer = window.navigator.userAgent ;  </span><br><span class=\"line\">    //ie  </span><br><span class=\"line\">    if (explorer.indexOf(&quot;MSIE&quot;) &gt;= 0) &#123;</span><br><span class=\"line\">            return &#x27;ie&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //firefox  </span><br><span class=\"line\">        else if (explorer.indexOf(&quot;Firefox&quot;) &gt;= 0) &#123;</span><br><span class=\"line\">            return &#x27;Firefox&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //Chrome  </span><br><span class=\"line\">        else if (explorer.indexOf(&quot;Chrome&quot;) &gt;= 0) &#123;</span><br><span class=\"line\">            return &#x27;Chrome&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //Opera  </span><br><span class=\"line\">        else if (explorer.indexOf(&quot;Opera&quot;) &gt;= 0) &#123;</span><br><span class=\"line\">            return &#x27;Opera&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //Safari  </span><br><span class=\"line\">        else if (explorer.indexOf(&quot;Safari&quot;) &gt;= 0) &#123;</span><br><span class=\"line\">            return &#x27;Safari&#x27;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function method5(tableid) &#123;</span><br><span class=\"line\">        if (getExplorer() == &#x27;ie&#x27;) &#123;</span><br><span class=\"line\">            var curTbl = document.getElementById(tableid);</span><br><span class=\"line\">            var oXL = new ActiveXObject(&quot;Excel.Application&quot;);</span><br><span class=\"line\">            var oWB = oXL.Workbooks.Add();</span><br><span class=\"line\">            var xlsheet = oWB.Worksheets(1);</span><br><span class=\"line\">            var sel = document.body.createTextRange();</span><br><span class=\"line\">            sel.moveToElementText(curTbl);</span><br><span class=\"line\">            sel.select();</span><br><span class=\"line\">            sel.execCommand(&quot;Copy&quot;);</span><br><span class=\"line\">            xlsheet.Paste();</span><br><span class=\"line\">            oXL.Visible = true;</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                var fname = oXL.Application.GetSaveAsFilename(&quot;Excel.xls&quot;,</span><br><span class=\"line\">                        &quot;Excel Spreadsheets (*.xls), *.xls&quot;);</span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">                print(&quot;Nested catch caught &quot; + e);</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                oWB.SaveAs(fname);</span><br><span class=\"line\">                oWB.Close(savechanges = false);</span><br><span class=\"line\">                oXL.Quit();</span><br><span class=\"line\">                oXL = null;</span><br><span class=\"line\">                idTmr = window.setInterval(&quot;Cleanup();&quot;, 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            tableToExcel(tableid)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function Cleanup() &#123;</span><br><span class=\"line\">        window.clearInterval(idTmr);</span><br><span class=\"line\">        CollectGarbage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var tableToExcel = (function() &#123;</span><br><span class=\"line\">        var uri = &#x27;data:application/vnd.ms-excel;base64,&#x27;, template = &#x27;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;table  border=&quot;1&quot;&gt;&#123;table&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&#x27;, base64 = function(</span><br><span class=\"line\">                s) &#123;</span><br><span class=\"line\">            return window.btoa(unescape(encodeURIComponent(s)))</span><br><span class=\"line\">        &#125;, format = function(s, c) &#123;</span><br><span class=\"line\">            return s.replace(/&#123;(\\w+)&#125;/g, function(m, p) &#123;</span><br><span class=\"line\">                return c[p];</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return function(table, name) &#123;</span><br><span class=\"line\">            if (!table.nodeType)</span><br><span class=\"line\">                table = document.getElementById(table)</span><br><span class=\"line\">            var ctx = &#123;</span><br><span class=\"line\">                worksheet : name || &#x27;Worksheet&#x27;,</span><br><span class=\"line\">                table : table.innerHTML</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            window.location.href = uri + base64(format(template, ctx))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>*<strong>末尾的括号不能省*</strong></p>\n","categories":["JavaScript"],"tags":["JavaScript"]}]