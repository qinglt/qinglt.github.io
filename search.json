[{"title":"JVM","url":"/posts/66c016fb/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><img src=\"/../images/image-20220429205418010.png\" alt=\"image-20220429205418010\"></p>\n","categories":["Java"],"tags":["八股文"]},{"title":"Redis学习","url":"/posts/8434e219/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"1、String\"><a href=\"#1、String\" class=\"headerlink\" title=\"1、String\"></a>1、String</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">append key <span class=\"string\">&quot;字符串&quot;</span> <span class=\"comment\"># 向key后追加一个字符串，如果当前key不存在，就相当于set</span></span><br><span class=\"line\"></span><br><span class=\"line\">strlen key <span class=\"comment\"># 获取字符串长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr key <span class=\"comment\"># 加一</span></span><br><span class=\"line\"></span><br><span class=\"line\">decr key <span class=\"comment\"># 自减1</span></span><br><span class=\"line\"></span><br><span class=\"line\">incrby value <span class=\"comment\">#增加value，可以设置步长，指定增量</span></span><br><span class=\"line\"></span><br><span class=\"line\">decrby value <span class=\"comment\"># 减少value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################################################</span></span><br><span class=\"line\">字符串范围 range </span><br><span class=\"line\"></span><br><span class=\"line\">getrange key start end <span class=\"comment\"># 下标从0开始，start-end</span></span><br><span class=\"line\">getrange key 0 -1 <span class=\"comment\"># 查看整个字符串,获取全部字符串，和get key是一样的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换</span></span><br><span class=\"line\"><span class=\"comment\"># 替换指定位置开始的字符串</span></span><br><span class=\"line\">setrange key offset string <span class=\"comment\"># offset：偏移量，string：要替换的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################################################</span></span><br><span class=\"line\"><span class=\"comment\"># setex(set with expire) # 设置过期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># setnx(set if not exist) # 不存在设置，在分布式锁中会经常使用，保证当前这个值存在</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setex key3 30 hello  <span class=\"comment\"># 设置key3的值30s后过期</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 27</span><br><span class=\"line\">127.0.0.1:6379&gt; get key3</span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;redis&quot;</span> <span class=\"comment\"># 如果mykey不存在，创建mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;mykey&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;key2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;MongoDB&quot;</span> <span class=\"comment\"># 如果mykey存在，则创建失败</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get mykey</span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\"><span class=\"comment\">########################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 批量set，get</span></span><br><span class=\"line\">mset k1 v1 k2 v2 ... <span class=\"comment\"># 同时设置多个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">mget k1 k2 ... <span class=\"comment\"># 同时获取多个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx k1 v1 k2 v2 ... <span class=\"comment\"># msetnx是一个原子性的操作，要么一起成功，要么一起失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class=\"comment\"># 设置一个user:1对象，值为json字符串来保存一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">mset user:1:name zhangsan user:1:age 20 <span class=\"comment\"># 这里的key是一个巧妙的设计，user:&#123;id&#125;:&#123;field&#125;，如此设计在redis中是完全可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">getset <span class=\"comment\"># 先get后se</span></span><br><span class=\"line\">getset key value <span class=\"comment\"># 如果不存在值则返回nil，如果存在值则获取原来的值，然后set</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String类似的使用场景：value除了是我们的字符串还可以是数字\"><a href=\"#String类似的使用场景：value除了是我们的字符串还可以是数字\" class=\"headerlink\" title=\"String类似的使用场景：value除了是我们的字符串还可以是数字\"></a>String类似的使用场景：value除了是我们的字符串还可以是数字</h2><p>计数器<br>统计多单位的数量 uid<br>粉丝数<br>对象缓存存储</p>\n<h1 id=\"2、list\"><a href=\"#2、list\" class=\"headerlink\" title=\"2、list\"></a>2、list</h1><p>基本的数据类型，列表</p>\n<p>在redis里面，我们可以把list玩成栈，队列</p>\n<p>所有的list命令都是用l来开头的，不区分大小写命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush list one <span class=\"comment\"># 将一个值或多个值插入到列表的头部</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1 <span class=\"comment\"># 获取所有元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 1 <span class=\"comment\"># 获取0-1，通过区间获取具体的值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush list right <span class=\"comment\"># 将一个值放在链表的尾部</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list  0  -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;right&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##############################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">lpop key <span class=\"comment\"># 移除列表的第一个元素</span></span><br><span class=\"line\">rpop key <span class=\"comment\"># 移除列表的最后一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">lindex key index <span class=\"comment\"># 获取key的index下标处的值，index从0开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">llen key <span class=\"comment\"># 获取list的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除指定的值</span></span><br><span class=\"line\">lrme key count value <span class=\"comment\"># 删除count个value，从前往后删除，精确匹配</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#############################################################</span></span><br><span class=\"line\">trim 修剪操作：list截断</span><br><span class=\"line\">ltrim key start stop <span class=\"comment\"># 截取list的start到stop之间的所有元素，左右都闭合，这个list就已经被改变了，只剩下截取的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">rpoplpush <span class=\"built_in\">source</span> destination <span class=\"comment\"># 移除列表的最后一个元素并添加到目的列表的第一个</span></span><br><span class=\"line\"></span><br><span class=\"line\">exists key <span class=\"comment\"># 判断里面有没有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">lset key index element <span class=\"comment\"># 设置key的index下标位置的值为element ，只有存在这个index下标才可以使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">linsert key before|after pivot element <span class=\"comment\"># 在pivot之前或之后插入值</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><p>list实际上一个链表，before Node after，左右都可以插入<br>如果key不存在，创建新的链表<br>如果存在，新增内容<br>如果移除了所有值，空链表，不存在<br>在两边改动效率最高，中间元素效率会低一点<br><strong>消息排队！消息队列，</strong></p>\n<h1 id=\"3、Set\"><a href=\"#3、Set\" class=\"headerlink\" title=\"3、Set\"></a>3、Set</h1><p><strong>set中的值是不能重复的</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sadd key value <span class=\"comment\"># 向set集合中添加</span></span><br><span class=\"line\"></span><br><span class=\"line\">smembers key <span class=\"comment\"># 查看key里面的所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">scard key <span class=\"comment\"># 获取set的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">sismember key value <span class=\"comment\"># 判断value值是否在key中</span></span><br><span class=\"line\"></span><br><span class=\"line\">srem key value <span class=\"comment\"># 移除value元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"comment\"># 无序不重复集合，抽随机</span></span><br><span class=\"line\"></span><br><span class=\"line\">srandmember myset count <span class=\"comment\"># 随机抽出指定个数元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">spop key count <span class=\"comment\"># 随机删除一些set集合中的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">smove <span class=\"built_in\">source</span> destination <span class=\"comment\"># 将一个集合中的元素移动到另一个集合中</span></span><br><span class=\"line\"></span><br><span class=\"line\">数字集合类：</span><br><span class=\"line\"> - 差集 sdiff key1 key2</span><br><span class=\"line\"> - 交集 sinter key1 key2 <span class=\"comment\"># 共同好友就可以这样实现</span></span><br><span class=\"line\"> - 并集 sunion key1 key2 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>共同关注，共同爱好，二度好友</p>\n<h1 id=\"4、Hsah\"><a href=\"#4、Hsah\" class=\"headerlink\" title=\"4、Hsah\"></a>4、Hsah</h1><p>Map集合，key-,key-map,这时候这个值是一个map集合，本质和string没有太大区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hset key filed value [field value] <span class=\"comment\"># 存放hash As of Redis 4.0.0, HSET is variadic and allows for multiple field/value pairs.</span></span><br><span class=\"line\"><span class=\"comment\"># As per Redis 4.0.0, HMSET is considered deprecated. Please use HSET in new code.</span></span><br><span class=\"line\"></span><br><span class=\"line\">hget key field <span class=\"comment\"># 获取key中filed键的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">hgetall key <span class=\"comment\"># 获取所有的键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdel key filed <span class=\"comment\"># 删除hash指定的字段，对应的value也就没有了</span></span><br><span class=\"line\"></span><br><span class=\"line\">hlen key <span class=\"comment\"># 获取hash的内容长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexists key field <span class=\"comment\"># 判断hash中的某个filed是否存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">hkeys key <span class=\"comment\"># 获取hash的所有键（key）</span></span><br><span class=\"line\"></span><br><span class=\"line\">hvals key <span class=\"comment\"># 获取hash的所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">hincrby key filed count <span class=\"comment\"># 自增count</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdecrby key field count  <span class=\"comment\"># 自减</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5、Zset（有序集合）\"><a href=\"#5、Zset（有序集合）\" class=\"headerlink\" title=\"5、Zset（有序集合）\"></a>5、Zset（有序集合）</h1><p>在set的基础上，增加了一个值, zset k1 score1 v1zadd key score value # 添加值，score代表优先级，可以一次添加多个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zrange key start end <span class=\"comment\"># 获取start-end的值，0 -1代表获取所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序如何实现</span></span><br><span class=\"line\">zrangebyscore key startscore endscore <span class=\"comment\"># 对集合通过score排序， 默认升序</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrangebyscore key -inf inf withscores <span class=\"comment\"># 显示score</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrevrange salary 0 -1 [withscores] <span class=\"comment\"># 降序排列所有值</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrem key member [member] <span class=\"comment\"># 移除元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">zcard key <span class=\"comment\"># 获取有序集合中的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">zcount key start end <span class=\"comment\"># 获取start-end之间的个数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多查官方文档\"><a href=\"#多查官方文档\" class=\"headerlink\" title=\"多查官方文档\"></a>多查官方文档</h2><p>案例思路：set 排序 存储班级成绩表，工资表排序</p>\n<p>普通消息：1.重要消息 2.带权重进行判断</p>\n<p>排行榜应用实现，取top n测试</p>\n"},{"title":"Vuex学习","url":"/posts/413c71da/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><img src=\"/../images/logo.png\" alt=\"logo\"></p>\n<h2 id=\"什么是vuex？\"><a href=\"#什么是vuex？\" class=\"headerlink\" title=\"什么是vuex？\"></a>什么是vuex？</h2><p>Vuex 是专门为 Vue.js 设计的状态管理库，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单地说就是采用全局单例模式，将组件的共享状态抽离出来管理，使组件树中的每一个位置都可以获取共享的状态（变量）或者触发行为。</p>\n<p>额，或者更直白的说就是响应式的全局变量</p>\n<h2 id=\"vuex核心概念\"><a href=\"#vuex核心概念\" class=\"headerlink\" title=\"vuex核心概念\"></a>vuex核心概念</h2><table>\n<thead>\n<tr>\n<th>State</th>\n<th>共享状态（即变量）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Getter</td>\n<td>基于state的派生状态，可理解为组件中的计算属性</td>\n</tr>\n<tr>\n<td>Mutation</td>\n<td>更改vuex的store中状态的唯一方法，通过提交mutation修改状态，同步操作（规则上是不允许异步操作的，虽然异步也可以执行，但是对devtool调试的状态跟踪或多个状态更改操作相互依赖是很不好的，所以不要觉得只要不报错我就可以这么用，还是尽量按照规则来比较好）</td>\n</tr>\n<tr>\n<td>Action</td>\n<td>类似mutation，不同之处，1.通过提交mutation修改状态  2.支持异步操作</td>\n</tr>\n<tr>\n<td>Module</td>\n<td>模块，在大型项目中为了方便状态的管理和协作开发将store拆分为多个子模块（modules），每个子模块拥有完整的state、mutation、action、getter</td>\n</tr>\n</tbody></table>\n<h2 id=\"vuex安装与使用\"><a href=\"#vuex安装与使用\" class=\"headerlink\" title=\"vuex安装与使用\"></a>vuex安装与使用</h2><p>1.安装vuex（命令）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vuex --save     // 如果安装了淘宝镜像，可以使用 cnpm安装</span><br></pre></td></tr></table></figure>","categories":["Vue"],"tags":["Vuex"]},{"title":"前端js打印table","url":"/posts/3af5528f/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Js代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印表格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> idTmr;  </span><br><span class=\"line\"><span class=\"keyword\">function</span>  <span class=\"title function_\">getExplorer</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> explorer = <span class=\"variable language_\">window</span>.<span class=\"property\">navigator</span>.<span class=\"property\">userAgent</span> ;  </span><br><span class=\"line\">    <span class=\"comment\">//ie  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;MSIE&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ie&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//firefox  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Firefox&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Firefox&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Chrome  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Chrome&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Chrome&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Opera  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Opera&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Opera&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Safari  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (explorer.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;Safari&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Safari&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">method5</span>(<span class=\"params\">tableid</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">getExplorer</span>() == <span class=\"string\">&#x27;ie&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> curTbl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(tableid);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> oXL = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Excel.Application&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> oWB = oXL.<span class=\"property\">Workbooks</span>.<span class=\"title class_\">Add</span>();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> xlsheet = oWB.<span class=\"title class_\">Worksheets</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> sel = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">createTextRange</span>();</span><br><span class=\"line\">            sel.<span class=\"title function_\">moveToElementText</span>(curTbl);</span><br><span class=\"line\">            sel.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">            sel.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&quot;Copy&quot;</span>);</span><br><span class=\"line\">            xlsheet.<span class=\"title class_\">Paste</span>();</span><br><span class=\"line\">            oXL.<span class=\"property\">Visible</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fname = oXL.<span class=\"property\">Application</span>.<span class=\"title class_\">GetSaveAsFilename</span>(<span class=\"string\">&quot;Excel.xls&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Excel Spreadsheets (*.xls), *.xls&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">print</span>(<span class=\"string\">&quot;Nested catch caught &quot;</span> + e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                oWB.<span class=\"title class_\">SaveAs</span>(fname);</span><br><span class=\"line\">                oWB.<span class=\"title class_\">Close</span>(savechanges = <span class=\"literal\">false</span>);</span><br><span class=\"line\">                oXL.<span class=\"title class_\">Quit</span>();</span><br><span class=\"line\">                oXL = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                idTmr = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"string\">&quot;Cleanup();&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">tableToExcel</span>(tableid)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Cleanup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(idTmr);</span><br><span class=\"line\">        <span class=\"title class_\">CollectGarbage</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tableToExcel = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> uri = <span class=\"string\">&#x27;data:application/vnd.ms-excel;base64,&#x27;</span>, template = <span class=\"string\">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;table  border=&quot;1&quot;&gt;&#123;table&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>, base64 = <span class=\"keyword\">function</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">                s</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">btoa</span>(<span class=\"built_in\">unescape</span>(<span class=\"built_in\">encodeURIComponent</span>(s)))</span><br><span class=\"line\">        &#125;, format = <span class=\"keyword\">function</span>(<span class=\"params\">s, c</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&#123;(\\w+)&#125;/g</span>, <span class=\"keyword\">function</span>(<span class=\"params\">m, p</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c[p];</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">table, name</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!table.<span class=\"property\">nodeType</span>)</span><br><span class=\"line\">                table = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(table)</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctx = &#123;</span><br><span class=\"line\">                worksheet : name || <span class=\"string\">&#x27;Worksheet&#x27;</span>,</span><br><span class=\"line\">                table : table.<span class=\"property\">innerHTML</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = uri + <span class=\"title function_\">base64</span>(<span class=\"title function_\">format</span>(template, ctx))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>*<strong>末尾的括号不能省*</strong></p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"git常用命令","url":"/posts/423abe9e/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"撤销对文件的修改\"><a href=\"#撤销对文件的修改\" class=\"headerlink\" title=\"撤销对文件的修改\"></a>撤销对文件的修改</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout --  index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"取消暂存的文件\"><a href=\"#取消暂存的文件\" class=\"headerlink\" title=\"取消暂存的文件\"></a>取消暂存的文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset HEAD index.html</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"跳过暂存区直接提交到仓库\"><a href=\"#跳过暂存区直接提交到仓库\" class=\"headerlink\" title=\"跳过暂存区直接提交到仓库\"></a>跳过暂存区直接提交到仓库</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看已加入本地仓库的文件\"><a href=\"#查看已加入本地仓库的文件\" class=\"headerlink\" title=\"查看已加入本地仓库的文件\"></a>查看已加入本地仓库的文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git ls-files</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h1><h3 id=\"从git仓库和工作区间同时移除index-html文件\"><a href=\"#从git仓库和工作区间同时移除index-html文件\" class=\"headerlink\" title=\"从git仓库和工作区间同时移除index.html文件\"></a>从git仓库和工作区间同时移除index.html文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm -f index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"只从git仓库中移除index-html-但保留工作区中的-index-html\"><a href=\"#只从git仓库中移除index-html-但保留工作区中的-index-html\" class=\"headerlink\" title=\"只从git仓库中移除index.html 但保留工作区中的 index.html\"></a>只从git仓库中移除index.html 但保留工作区中的 index.html</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm --cached index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除test文件夹流程\"><a href=\"#删除test文件夹流程\" class=\"headerlink\" title=\"删除test文件夹流程\"></a>删除test文件夹流程</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.将远程仓库里面的项目拉下来</span><br><span class=\"line\"></span><br><span class=\"line\">$git pull origin main</span><br><span class=\"line\"></span><br><span class=\"line\">2.删除test文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">$git rm -f --cached test</span><br><span class=\"line\"></span><br><span class=\"line\">4.提交，添加说明</span><br><span class=\"line\"></span><br><span class=\"line\">$git commit -m &quot;删除test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">5.将本次更改更新到远程仓库</span><br><span class=\"line\"></span><br><span class=\"line\">$git push</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"忽略文件-gitignore\"><a href=\"#忽略文件-gitignore\" class=\"headerlink\" title=\"忽略文件.gitignore\"></a>忽略文件.gitignore</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.以#开头的是注释</span><br><span class=\"line\"></span><br><span class=\"line\">2.以/结尾的是目录</span><br><span class=\"line\"></span><br><span class=\"line\">3.以/开头的是防止递归</span><br><span class=\"line\"></span><br><span class=\"line\">4.以!开头的是表示取反</span><br><span class=\"line\"></span><br><span class=\"line\">5.可以使用glob模式进行文件夹和文件的匹配</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"glob模式是指简化可的正则表达式\"><a href=\"#glob模式是指简化可的正则表达式\" class=\"headerlink\" title=\"glob模式是指简化可的正则表达式\"></a>glob模式是指简化可的正则表达式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.星号* 2.[abc] 3.问号? 4.两个星号**</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"gitignore文件的例子\"><a href=\"#gitignore文件的例子\" class=\"headerlink\" title=\".gitignore文件的例子\"></a>.gitignore文件的例子</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#忽略所有的.a文件</span><br><span class=\"line\"></span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\">#但跟踪所有的lib.a文件，即使你在前面忽略了.a文件</span><br><span class=\"line\"></span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\">#只忽略当前目录下的TODO文件，而不忽略subdir/TODO</span><br><span class=\"line\"></span><br><span class=\"line\">/TODO </span><br><span class=\"line\"></span><br><span class=\"line\">#忽略任何目录下名为build的文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\">#忽略doc/notes/txt ，但不忽略 doc/server/arch.txt</span><br><span class=\"line\"></span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\">#忽略doc/目录及其所有子目录下的.pdf文件</span><br><span class=\"line\"></span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h1><blockquote>\n<p>按时间先后顺序列出所有的提交历史，最近的提交排在最上面</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>只展示最新的两条提交历史,数字可以按需填写</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在一行上展示最近两条提交的历史信息</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在一行上展示最近的两条提交历史信息-并自定义输出的格式\"><a href=\"#在一行上展示最近的两条提交历史信息-并自定义输出的格式\" class=\"headerlink\" title=\"在一行上展示最近的两条提交历史信息,并自定义输出的格式\"></a>在一行上展示最近的两条提交历史信息,并自定义输出的格式</h3><blockquote>\n<p> %h 提交的简写哈希值 %an 作者名字  %ar 作者修订日期，按多久以前的方式显示  %s 提交说明 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"回退到指定的版本\"><a href=\"#回退到指定的版本\" class=\"headerlink\" title=\"回退到指定的版本\"></a>回退到指定的版本</h1><h3 id=\"在一行上展示所有的提交历史\"><a href=\"#在一行上展示所有的提交历史\" class=\"headerlink\" title=\"在一行上展示所有的提交历史\"></a>在一行上展示所有的提交历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用git-reset-–hard-命令，根据指定的提交ID-回退到指定的版本\"><a href=\"#使用git-reset-–hard-命令，根据指定的提交ID-回退到指定的版本\" class=\"headerlink\" title=\"使用git reset –hard 命令，根据指定的提交ID 回退到指定的版本\"></a>使用git reset –hard 命令，根据指定的提交ID 回退到指定的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在旧版本中使用-git-reflog-–pretty-x3D-oneline-命令，查看命令操作的历史\"><a href=\"#在旧版本中使用-git-reflog-–pretty-x3D-oneline-命令，查看命令操作的历史\" class=\"headerlink\" title=\"在旧版本中使用 git reflog –pretty&#x3D;oneline 命令，查看命令操作的历史\"></a>在旧版本中使用 git reflog –pretty&#x3D;oneline 命令，查看命令操作的历史</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reflog --pretty=oneline</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"再次根据最新的提交ID-跳转到最新的版本\"><a href=\"#再次根据最新的提交ID-跳转到最新的版本\" class=\"headerlink\" title=\"再次根据最新的提交ID 跳转到最新的版本\"></a>再次根据最新的提交ID 跳转到最新的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>主分支上不进行代码开发，已经开发完成的功能分支会在合并后结束生命</p>\n<h2 id=\"查看所有分支的命令\"><a href=\"#查看所有分支的命令\" class=\"headerlink\" title=\"查看所有分支的命令\"></a>查看所有分支的命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch   -a</span><br><span class=\"line\"></span><br><span class=\"line\">所在分支前会有*标识</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">执行完后  还是处在当前分支，并未到达新建分支 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分支的快速创建和切换\"><a href=\"#分支的快速创建和切换\" class=\"headerlink\" title=\"分支的快速创建和切换\"></a>分支的快速创建和切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">实际就是是  git branch 分支名  git branch 分支名  这两条命令的合并</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支时总是以主分支为基础来进行创建和切换分支 </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.先切换到main分支：git checkout main</span><br><span class=\"line\"></span><br><span class=\"line\">2.在main上运行git merge test命令 将test 分支上的代码合并到main分支</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1。假设在test分支合并到main期间，代码发生了冲突</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout main</span><br><span class=\"line\"></span><br><span class=\"line\">git merge test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.打开包含冲突的文件，手动解决后，再执行如下命令</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;解决了分支合并冲突的问题&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"远程分支操作\"><a href=\"#远程分支操作\" class=\"headerlink\" title=\"远程分支操作\"></a>远程分支操作</h1><h2 id=\"第一次把本地分支推送到远程仓库，需要运行如下命令\"><a href=\"#第一次把本地分支推送到远程仓库，需要运行如下命令\" class=\"headerlink\" title=\"第一次把本地分支推送到远程仓库，需要运行如下命令\"></a>第一次把本地分支推送到远程仓库，需要运行如下命令</h2><h3 id=\"只在第一次推送的时候需要加-u-参数：-u-表示把本地分支和远程分支进行关联\"><a href=\"#只在第一次推送的时候需要加-u-参数：-u-表示把本地分支和远程分支进行关联\" class=\"headerlink\" title=\"只在第一次推送的时候需要加 -u 参数：-u 表示把本地分支和远程分支进行关联\"></a>只在第一次推送的时候需要加 -u 参数：-u 表示把本地分支和远程分支进行关联</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  push -u  远程仓库名别名  本地分支名:远程分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin payment:pay</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\"><a href=\"#如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\" class=\"headerlink\" title=\"如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：\"></a>如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin payment </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"查看远程仓库中所有的分支列表\"><a href=\"#查看远程仓库中所有的分支列表\" class=\"headerlink\" title=\"查看远程仓库中所有的分支列表\"></a>查看远程仓库中所有的分支列表</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote show 远程仓库名</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"跟踪分支\"><a href=\"#跟踪分支\" class=\"headerlink\" title=\"跟踪分支\"></a>跟踪分支</h1><h3 id=\"是指从远程仓库中-，把远程分支下载到本地仓库中。命令如下：\"><a href=\"#是指从远程仓库中-，把远程分支下载到本地仓库中。命令如下：\" class=\"headerlink\" title=\"是指从远程仓库中 ，把远程分支下载到本地仓库中。命令如下：\"></a>是指从远程仓库中 ，把远程分支下载到本地仓库中。命令如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.把对应的而远程分支下载到本地仓库，保持本地分支和远程分支名称相同：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout  远程分支名     示例： git  checkout  pay</span><br><span class=\"line\"></span><br><span class=\"line\">2.把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名：</span><br><span class=\"line\"></span><br><span class=\"line\">git  checkout  -b  本地分支名  远程仓库名/远程分支名</span><br><span class=\"line\"></span><br><span class=\"line\">示例：git  checkout -b payment  origin/pay</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"拉取远程分支最新代码\"><a href=\"#拉取远程分支最新代码\" class=\"headerlink\" title=\"拉取远程分支最新代码\"></a>拉取远程分支最新代码</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  pull </span><br><span class=\"line\"></span><br><span class=\"line\">更新当前分支与远程 分支保持一致</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"删除远程仓库指定分支\"><a href=\"#删除远程仓库指定分支\" class=\"headerlink\" title=\"删除远程仓库指定分支\"></a>删除远程仓库指定分支</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git  push   远程仓库名 --delete  远程分支名称</span><br><span class=\"line\"></span><br><span class=\"line\">示例：git  push  origin  --delete pay</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除本地分支-1\"><a href=\"#删除本地分支-1\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">没被合并的分支 在执行删除操作时会报error    run&#x27;git branch -D 分支名&#x27;</span><br></pre></td></tr></table></figure>\n\n\n","categories":["Java"],"tags":["git"]},{"title":"异步、定时、邮件任务","url":"/posts/a60ba49d/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>异步任务<br>1、创建一个service包</p>\n<p>2、创建一个类AsyncService</p>\n<p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p>\n<p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;业务进行中....&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写controller包</p>\n<p>4、编写AsyncController类</p>\n<p>我们去写一个Controller测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       asyncService.hello();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、访问<a href=\"http://localhost/\">http://localhost</a>:8080&#x2F;hello进行测试，3秒后出现success，这是同步等待的情况。</p>\n<p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p>\n<p>6、给hello方法添加@Async注解；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉Spring这是一个异步方法</span></span><br><span class=\"line\"><span class=\"meta\">@Async</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">       e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   System.out.println(<span class=\"string\">&quot;业务进行中....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAsync</span> <span class=\"comment\">//开启异步注解功能</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootTaskApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>\n<p>定时任务<br>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p>\n<p>TaskExecutor接口</p>\n<p>TaskScheduler接口</p>\n<p>两个注解：</p>\n<p>@EnableScheduling</p>\n<p>@Scheduled</p>\n<p>cron表达式：</p>\n<p>图片</p>\n<p>图片</p>\n<p>测试步骤：</p>\n<p>1、创建一个ScheduledService</p>\n<p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScheduledService</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//秒   分   时     日   月   周几</span></span><br><span class=\"line\">   <span class=\"comment\">//0 * * * * MON-FRI</span></span><br><span class=\"line\">   <span class=\"comment\">//注意cron表达式的用法；</span></span><br><span class=\"line\">   <span class=\"meta\">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;hello.....&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAsync</span> <span class=\"comment\">//开启异步注解功能</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span> <span class=\"comment\">//开启基于注解的定时任务</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootTaskApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、我们来详细了解下cron表达式；</p>\n<p><a href=\"http://www.bejson.com/othertools/cron/\">http://www.bejson.com/othertools/cron/</a></p>\n<p>4、常用的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">（1）0/2     ?   表示每2秒 执行任务</span><br><span class=\"line\">（1）0 0/2   * ?   表示每2分钟 执行任务</span><br><span class=\"line\">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class=\"line\">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class=\"line\">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class=\"line\">（4）0 0 10,14,16   ?   每天上午10点，下午2点，4点</span><br><span class=\"line\">（5）0 0/30 9-17   ?   朝九晚五工作时间内每半小时</span><br><span class=\"line\">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class=\"line\">（7）0 0 12   ?   每天中午12点触发</span><br><span class=\"line\">（8）0 15 10 ?     每天上午10:15触发</span><br><span class=\"line\">（9）0 15 10   ?     每天上午10:15触发</span><br><span class=\"line\">（10）0 15 10   ?   每天上午10:15触发</span><br><span class=\"line\">（11）0 15 10   ? 2005   2005年的每天上午10:15触发</span><br><span class=\"line\">（12）0  *14*  * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class=\"line\">（13）0 0/5 14   ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class=\"line\">（14）0 0/5 14,18   ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class=\"line\">（15）0 0-5 14   ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class=\"line\">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class=\"line\">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class=\"line\">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class=\"line\">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class=\"line\">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>\n\n<p>邮件任务<br>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>\n<p>邮件发送需要引入spring-boot-start-mail</p>\n<p>SpringBoot 自动配置MailSenderAutoConfiguration</p>\n<p>定义MailProperties内容，配置在application.yml中</p>\n<p>自动装配JavaMailSender</p>\n<p>测试邮件发送</p>\n<p>测试：</p>\n<p>1、引入pom依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>看它引入的依赖，可以看到 jakarta.mail</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jakarta.mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、查看自动配置类：MailSenderAutoConfiguration</p>\n<p>图片</p>\n<p>这个类中存在bean，JavaMailSenderImpl</p>\n<p>图片</p>\n<p>然后我们去看下配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(</span></span><br><span class=\"line\"><span class=\"meta\">   prefix = &quot;spring.mail&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MailProperties</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_CHARSET;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Integer port;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">protocol</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;smtp&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Charset defaultEncoding;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Map&lt;String, String&gt; properties;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String jndiName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.mail.username=24736743@qq.com</span></span><br><span class=\"line\"><span class=\"string\">spring.mail.password=你的qq授权码</span></span><br><span class=\"line\"><span class=\"string\">spring.mail.host=smtp.qq.com</span></span><br><span class=\"line\"><span class=\"comment\"># qq需要配置ssl</span></span><br><span class=\"line\"><span class=\"string\">spring.mail.properties.mail.smtp.ssl.enable=true</span></span><br></pre></td></tr></table></figure>\n\n<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p>\n<p>图片</p>\n<p>4、Spring单元测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">JavaMailSenderImpl mailSender;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//邮件设置1：一个简单的邮件</span></span><br><span class=\"line\">   <span class=\"type\">SimpleMailMessage</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleMailMessage</span>();</span><br><span class=\"line\">   message.setSubject(<span class=\"string\">&quot;通知-明天来狂神这听课&quot;</span>);</span><br><span class=\"line\">   message.setText(<span class=\"string\">&quot;今晚7:30开会&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   message.setTo(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\">   message.setFrom(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\">   mailSender.send(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MessagingException &#123;</span><br><span class=\"line\">   <span class=\"comment\">//邮件设置2：一个复杂的邮件</span></span><br><span class=\"line\">   <span class=\"type\">MimeMessage</span> <span class=\"variable\">mimeMessage</span> <span class=\"operator\">=</span> mailSender.createMimeMessage();</span><br><span class=\"line\">   <span class=\"type\">MimeMessageHelper</span> <span class=\"variable\">helper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessageHelper</span>(mimeMessage, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   helper.setSubject(<span class=\"string\">&quot;通知-明天来狂神这听课&quot;</span>);</span><br><span class=\"line\">   helper.setText(<span class=\"string\">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//发送附件</span></span><br><span class=\"line\">   helper.addAttachment(<span class=\"string\">&quot;1.jpg&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">   helper.addAttachment(<span class=\"string\">&quot;2.jpg&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   helper.setTo(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\">   helper.setFrom(<span class=\"string\">&quot;24736743@qq.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   mailSender.send(mimeMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看邮箱，邮件接收成功！</p>\n<p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p>\n","categories":["Java"],"tags":["SpringBoot"]},{"title":"Vue学习","url":"/posts/317b894e/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"Vue生命周期\"><a href=\"#Vue生命周期\" class=\"headerlink\" title=\"Vue生命周期\"></a>Vue生命周期</h1><p><img src=\"/../images/lifecycle.png\" alt=\"lifecycle\"></p>\n<h1 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a><a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h1><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> attribute 甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中。</p>\n<h1 id=\"Vue中的is属性，及子组件的data\"><a href=\"#Vue中的is属性，及子组件的data\" class=\"headerlink\" title=\"Vue中的is属性，及子组件的data\"></a>Vue中的is属性，及子组件的data</h1><h2 id=\"1、is属性\"><a href=\"#1、is属性\" class=\"headerlink\" title=\"1、is属性\"></a>1、is属性</h2><p>根据HTML规范，<code>&lt;table&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;select&gt;</code>等元素只能包含特定元素，当模板标签在使用有限制性的元素，在渲染时就会出现bug</p>\n<p>如下例所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;row&#x27;</span>,&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm=<span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#root&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染结果如下： </p>\n<p>​\t<img src=\"/../images/image-20220501155514272.png\" alt=\"image-20220501155514272\"></p>\n<p>渲染完成后，tr元素放在了table元素的外部。因为tbody元素内部只能放tr标签，上例在 <code>&lt;table&gt;</code>内部写了<code>&lt;row&gt;</code>标签就会引发bug。引入is属性后上例中DOM部分可以这样写</p>\n <table>\n        <tbody>\n            <tr is=\"row\"></tr>\n            <tr is=\"row\"></tr>\n            <tr is=\"row\"></tr>\n        </tbody>\n        </table>\n\n<p>这样，便可以正确的渲染：</p>\n<p><img src=\"/../images/image-20220501155547910.png\" alt=\"image-20220501155547910\"></p>\n<h2 id=\"2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。\"><a href=\"#2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。\" class=\"headerlink\" title=\"2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。\"></a>2、在子组件里面定义data时，data必须是一个函数，不能是一个对象。这是为了保证每个子组件都有独立的data数据。</h2><h1 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h1><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>\n<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">&quot;doThis&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">&quot;doThat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">&quot;doThis&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">&quot;doThat&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p>\n<blockquote>\n<p>2.1.4 新增</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">&quot;doThis&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不像其它只能对原生的 DOM 事件起作用的修饰符，<code>.once</code> 修饰符还能被用到自定义的<a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html\">组件事件</a>上。如果你还没有阅读关于组件的文档，现在大可不必担心。</p>\n<blockquote>\n<p>2.3.0 新增</p>\n</blockquote>\n<p>Vue 还对应 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:scroll.passive</span>=<span class=\"string\">&quot;onScroll&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个 <code>.passive</code> 修饰符尤其能够提升移动端的性能。</p>\n<p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不</em>想阻止事件的默认行为。</p>\n<h1 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h1><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以直接将 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.page-down</span>=<span class=\"string\">&quot;onPageDown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>PageDown</code> 时被调用。</p>\n<h3 id=\"按键码\"><a href=\"#按键码\" class=\"headerlink\" title=\"按键码\"></a>按键码</h3><p><code>keyCode</code> 的事件用法<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\">已经被废弃了</a>并可能不会被最新的浏览器支持。</p>\n<p>使用 <code>keyCode</code> attribute 也是允许的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code> (捕获“删除”和“退格”键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p>有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。</p>\n<p>你还可以通过全局 <code>config.keyCodes</code> 对象<a href=\"https://cn.vuejs.org/v2/api/#keyCodes\">自定义按键修饰符别名</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 可以使用 `v-on:keyup.f1`</span><br><span class=\"line\">Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"监听子组件事件\"><a href=\"#监听子组件事件\" class=\"headerlink\" title=\"监听子组件事件\"></a>监听子组件事件</h1><p>在我们开发 <code>&lt;blog-post&gt;</code> 组件时，它的一些功能可能要求我们和父级组件进行沟通。例如我们可能会引入一个辅助功能来放大博文的字号，同时让页面的其它部分保持默认的字号。</p>\n<p>在其父组件中，我们可以通过添加一个 <code>postFontSize</code> 数据 property 来支持这个功能：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#blog-posts-events-demo&#x27;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    posts: [/* ... */],</span><br><span class=\"line\">    postFontSize: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>它可以在模板中用来控制所有博文的字号：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog-posts-events-demo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;post in posts&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">&quot;post.id&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:post</span>=<span class=\"string\">&quot;post&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们在每篇博文正文之前添加一个按钮来放大字号：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#x27;blog-post&#x27;, &#123;</span><br><span class=\"line\">  props: [&#x27;post&#x27;],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;blog-post&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        Enlarge text</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;post.content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>问题是这个按钮不会做任何事：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当点击这个按钮时，我们需要告诉父级组件放大所有博文的文本。幸好 Vue 实例提供了一个自定义事件的系统来解决这个问题。父级组件可以像处理 native DOM 事件一样通过 <code>v-on</code> 监听子组件实例的任意事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">&quot;postFontSize += 0.1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>同时子组件可以通过调用内建的 <a href=\"https://cn.vuejs.org/v2/api/#vm-emit\"><strong><code>$emit</code></strong> 方法</a>并传入事件名称来触发一个事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有了这个 <code>v-on:enlarge-text=&quot;postFontSize += 0.1&quot;</code> 监听器，父级组件就会接收该事件并更新 <code>postFontSize</code> 的值。</p>\n<h2 id=\"使用事件抛出一个值\"><a href=\"#使用事件抛出一个值\" class=\"headerlink\" title=\"使用事件抛出一个值\"></a>使用事件抛出一个值</h2><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;$emit(&#x27;enlarge-text&#x27;, 0.1)&quot;</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">&quot;postFontSize += $event&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者，如果这个事件处理函数是一个方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">&quot;onEnlargeText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么这个值将会作为第一个参数传入这个方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  onEnlargeText: function (enlargeAmount) &#123;</span><br><span class=\"line\">    this.postFontSize += enlargeAmount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"在组件上使用-v-model\"><a href=\"#在组件上使用-v-model\" class=\"headerlink\" title=\"在组件上使用 v-model\"></a>在组件上使用 <code>v-model</code></h2><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;searchText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>等价于：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;searchText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当用在组件上时，<code>v-model</code> 则会这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">custom-input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;searchText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">&quot;searchText = $event&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p>\n<ul>\n<li>将其 <code>value</code> attribute 绑定到一个名叫 <code>value</code> 的 prop 上</li>\n<li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li>\n</ul>\n<p>写成代码之后是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#x27;custom-input&#x27;, &#123;</span><br><span class=\"line\">  props: [&#x27;value&#x27;],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;value&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:input</span>=<span class=\"string\">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">custom-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;searchText&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义组件的-v-model\"><a href=\"#自定义组件的-v-model\" class=\"headerlink\" title=\"自定义组件的 v-model\"></a>自定义组件的 <code>v-model</code></h2><blockquote>\n<p>2.2.0+ 新增</p>\n</blockquote>\n<p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，但是像单选框、复选框等类型的输入控件可能会将 <code>value</code> attribute 用于&#x3D;&#x3D;不同的目的&#x3D;&#x3D;。<code>model</code> 选项可以用来避免这样的冲突：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#x27;base-checkbox&#x27;, &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: &#x27;checked&#x27;,</span><br><span class=\"line\">    event: &#x27;change&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    checked: Boolean</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:checked</span>=<span class=\"string\">&quot;checked&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:change</span>=<span class=\"string\">&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在在这个组件上使用 <code>v-model</code> 的时候：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;base-checkbox v-model=&quot;lovingVue&quot;&gt;&lt;/base-checkbox&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>lovingVue</code> 的值将会传入这个名为 <code>checked</code> 的 prop。同时当 <code>&lt;base-checkbox&gt;</code> 触发一个 <code>change</code> 事件并附带一个新的值的时候，这个 <code>lovingVue</code> 的 property 将会被更新。</p>\n<p>注意你仍然需要在组件的 <code>props</code> 选项里声明 <code>checked</code> 这个 prop。</p>\n<h1 id=\"事件名\"><a href=\"#事件名\" class=\"headerlink\" title=\"事件名\"></a>事件名</h1><p>不同于组件和 prop，&#x3D;&#x3D;事件名不存在任何自动化的大小写转换&#x3D;&#x3D;。而是触发的事件名需要完全匹配监听这个事件所用的名称。举个例子，如果触发一个 camelCase 名字的事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$emit(&#x27;myEvent&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>则监听这个名字的 kebab-case 版本是不会有任何效果的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 没有效果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:my-event</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 <code>v-on</code> 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到。</p>\n<p>因此，我们推荐你<strong>始终使用 kebab-case 的事件名</strong>。</p>\n<h1 id=\"attrs和-listeners的使用\"><a href=\"#attrs和-listeners的使用\" class=\"headerlink\" title=\"$attrs和$listeners的使用\"></a>$attrs和$listeners的使用</h1><blockquote>\n<p>转自稀土掘金（<a href=\"https://juejin.cn/post/7008811358380621854\">vue $attrs和$listeners的使用 - 掘金 (juejin.cn)</a></p>\n</blockquote>\n<h3 id=\"attrs-和-listeners-的用法\"><a href=\"#attrs-和-listeners-的用法\" class=\"headerlink\" title=\"$attrs 和 $listeners 的用法\"></a><code>$attrs</code> 和 <code>$listeners</code> 的用法</h3><p>在vue2.4中，为了解决该需求，引入了<code>$attrs</code> 和<code>$listeners</code>， 新增了<code>inheritAttrs</code> 选项。 在版本2.4以前，默认情况下父作用域的不被认作props的属性属性百年孤独，将会“回退”且作为普通的HTML特性应用在子组件的根元素上。如下列的例子</p>\n<p>父组件的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child-dom</span> <span class=\"attr\">:foo</span>=<span class=\"string\">&quot;foo&quot;</span> <span class=\"attr\">:bar</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-dom</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildDom</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/attrs/ChildDom.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">ChildDom</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">foo</span>: <span class=\"string\">&quot;foo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bar&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo:&#123;&#123; foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;foo&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先看一下这样写的时候，控制台打印出来的dom结构是这样的：</p>\n<p><img src=\"/../images/image-20220502150713646.png\" alt=\"image-20220502150713646\"> </p>\n<p>在2.4中新增选项<code>inheritAttrs</code>，<code>inheritAttrs</code>的默认值为true, 将<code>inheritAttrs</code>的值设为<strong>false</strong>, 这些默认的行为会禁止掉。但是通过实例属性 <code>$attrs</code> ,可以将这些特性生效，且可以通过<code>v-bind</code> 绑定到子组件的非根元素上。</p>\n<p>将子组件的代码修改一下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo:&#123;&#123; foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>attrs: &#123;&#123; $attrs &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dom-child</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dom-child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">DomChild</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./DomChild.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;foo&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">DomChild</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在加一个孙组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar:&#123;&#123; bar &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;bar&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面显示如下：</p>\n<p><img src=\"/../images/image-20220502150739256.png\" alt=\"image-20220502150739256\"></p>\n<p>从上面的代码，可以看出使用<code>$attrs</code> ，<code>inheritAttrs</code> 属性能够使用简洁的代码，将组件A的数据传递给 组件C，该场景的使用范围还是挺广的。</p>\n<p>那我们现在来看看组件C怎么传值给组件A？</p>\n<p>vue2.4版本新增了<code>$listeners</code> 属性，我们在组件B上 绑定 <code>v-on=”$listeners”</code>, 在组件A中，监听组件C触发的事件。就能把组件C发出的数据，传递给组件A。</p>\n<p>修改一下父组件的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child-dom</span> <span class=\"attr\">:foo</span>=<span class=\"string\">&quot;foo&quot;</span> <span class=\"attr\">:bar</span>=<span class=\"string\">&quot;bar&quot;</span> @<span class=\"attr\">upFoo</span>=<span class=\"string\">&quot;update&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-dom</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">ChildDom</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/attrs/ChildDom.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">ChildDom</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">foo</span>: <span class=\"string\">&quot;foo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bar&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">update</span>(<span class=\"params\">val</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;update success&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo:&#123;&#123; foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>attrs: &#123;&#123; $attrs &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dom-child</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span> <span class=\"attr\">v-on</span>=<span class=\"string\">&quot;$listeners&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dom-child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">DomChild</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./DomChild.vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;foo&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">DomChild</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>孙组件代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar:&#123;&#123; bar &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;startUpFoo&quot;</span>&gt;</span>我要更新foo<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;bar&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">startUpFoo</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;upFoo&quot;</span>, <span class=\"string\">&quot;foooooooooooo&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;startUpFoo&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>运行结果：</p>\n<p><img src=\"/../images/image-20220502150832137.png\" alt=\"image-20220502150832137\"></p>\n<h1 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\".sync 修饰符\"></a><code>.sync</code> 修饰符</h1><blockquote>\n<p>2.3.0+ 新增</p>\n</blockquote>\n<p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源。</p>\n<p>这也是为什么我们推荐以 <code>update:myPropName</code> 的模式触发事件取而代之。举个例子，在一个包含 <code>title</code> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$emit(&#x27;update:title&#x27;, newTitle)</span><br></pre></td></tr></table></figure>\n\n<p>然后父组件可以监听那个事件并根据需要更新一个本地的数据 property。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;text-document</span><br><span class=\"line\">  v-bind:title=&quot;doc.title&quot;</span><br><span class=\"line\">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class=\"line\">&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure>\n\n<p>为了方便起见，我们为这种模式提供一个缩写，即 <code>.sync</code> 修饰符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;text-document v-bind:title.sync=&quot;doc.title&quot;&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意带有 <code>.sync</code> 修饰符的 <code>v-bind</code> <strong>不能</strong>和表达式一起使用 (例如 <code>v-bind:title.sync=”doc.title + ‘!’”</code> 是无效的)。取而代之的是，你只能提供你想要绑定的 property 名，类似 <code>v-model</code>。</p>\n<h1 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h1><p>我们在一个多标签的界面中使用 <code>is</code> attribute 来切换不同的组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">&quot;currentTabComponent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"在动态组件上使用-keep-alive\"><a href=\"#在动态组件上使用-keep-alive\" class=\"headerlink\" title=\"在动态组件上使用 keep-alive\"></a>在动态组件上使用 <code>keep-alive</code></h2><p>能够被在它们第一次被创建的时候缓存下来。为了解决这个问题，我们可以用一个 <code>&lt;keep-alive&gt;</code> 元素将其动态组件包裹起来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">&quot;currentTabComponent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h1>","categories":["Vue"],"tags":["Vue"]},{"title":"mybatis多表操作","url":"/posts/b5460b5f/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"多对一的处理\"><a href=\"#多对一的处理\" class=\"headerlink\" title=\"多对一的处理\"></a>多对一的处理</h2><p>多对一的理解：</p>\n<ul>\n<li>多个学生对应一个老师</li>\n<li>如果对于学生这边，就是一个多对一的现象，即从学生这边关联一个老师！</li>\n</ul>\n<blockquote>\n<p>数据库设计</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `teacher` (</span><br><span class=\"line\">`id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> teacher(`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;秦老师&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `student` (</span><br><span class=\"line\">`id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`tid` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\">KEY `fktid` (`tid`),</span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> `fktid` <span class=\"keyword\">FOREIGN</span> KEY (`tid`) <span class=\"keyword\">REFERENCES</span> `teacher` (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `student` (`id`, `name`, `tid`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `student` (`id`, `name`, `tid`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;小红&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `student` (`id`, `name`, `tid`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;小张&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `student` (`id`, `name`, `tid`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;小李&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `student` (`id`, `name`, `tid`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>搭建测试环境</p>\n</blockquote>\n<p>1、IDEA安装Lombok插件</p>\n<p>2、引入Maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.16.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、在代码中增加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> <span class=\"comment\">//GET,SET,ToString，有参，无参构造</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">//多个学生可以是同一个老师，即多对一</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Teacher teacher;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、编写实体类对应的Mapper接口 【两个】</p>\n<ul>\n<li><strong>无论有没有需求，都应该写上，以备后来之需！</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentMapper</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TeacherMapper</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、编写Mapper接口对应的 mapper.xml配置文件 【两个】</p>\n<ul>\n<li><strong>无论有没有需求，都应该写上，以备后来之需！</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>按查询嵌套处理</p>\n</blockquote>\n<p>1、给StudentMapper接口增加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取所有学生及对应老师的信息</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">getStudents</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2、编写对应的Mapper文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">   需求：获取所有学生及对应老师的信息</span></span><br><span class=\"line\"><span class=\"comment\">   思路：</span></span><br><span class=\"line\"><span class=\"comment\">       1. 获取所有学生的信息</span></span><br><span class=\"line\"><span class=\"comment\">       2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class=\"line\"><span class=\"comment\">       3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class=\"line\"><span class=\"comment\">           1. 做一个结果集映射：StudentTeacher</span></span><br><span class=\"line\"><span class=\"comment\">           2. StudentTeacher结果集的类型为 Student</span></span><br><span class=\"line\"><span class=\"comment\">           3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class=\"line\"><span class=\"comment\">              多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class=\"line\"><span class=\"comment\">           4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudents&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from student</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentTeacher&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--association关联属性 property属性名(对应实体类的属性名) javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacher&quot;</span>  <span class=\"attr\">column</span>=<span class=\"string\">&quot;tid&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Teacher&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">   这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class=\"line\"><span class=\"comment\">   association中column多参数配置：</span></span><br><span class=\"line\"><span class=\"comment\">       column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">       其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;teacher&quot;</span>&gt;</span></span><br><span class=\"line\">      select * from teacher where id = #&#123;id&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写完毕去Mybatis配置文件中，注册Mapper！</p>\n<p>4、注意点说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentTeacher&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacher&quot;</span>  <span class=\"attr\">column</span>=<span class=\"string\">&quot;&#123;id=tid,name=tid&#125;&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Teacher&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class=\"line\"><span class=\"comment\">association中column多参数配置：</span></span><br><span class=\"line\"><span class=\"comment\">   column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">   其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;teacher&quot;</span>&gt;</span></span><br><span class=\"line\">  select * from teacher where id = #&#123;id&#125; and name = #&#123;name&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetStudents</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> MybatisUtils.getSession();</span><br><span class=\"line\">   <span class=\"type\">StudentMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> session.getMapper(StudentMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;Student&gt; students = mapper.getStudents();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Student student : students)&#123;</span><br><span class=\"line\">       System.out.println(</span><br><span class=\"line\">               <span class=\"string\">&quot;学生名:&quot;</span>+ student.getName()</span><br><span class=\"line\">                       +<span class=\"string\">&quot;\\t老师:&quot;</span>+student.getTeacher().getName());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>按结果嵌套处理</p>\n</blockquote>\n<p>除了上面这种方式，还有其他思路吗？</p>\n<p>我们还可以按照结果进行嵌套处理；</p>\n<p>1、接口方法编写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public List&lt;Student&gt; getStudents2();</span><br></pre></td></tr></table></figure>\n\n<p>2、编写对应的mapper文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">按查询结果嵌套处理</span></span><br><span class=\"line\"><span class=\"comment\">思路：</span></span><br><span class=\"line\"><span class=\"comment\">   1. 直接查询出结果，进行结果集的映射</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudents2&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class=\"line\">  select s.id sid, s.name sname , t.name tname</span><br><span class=\"line\">  from student s,teacher t</span><br><span class=\"line\">  where s.tid = t.id</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentTeacher2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sid&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sname&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tname&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、去mybatis-config文件中注入【此处应该处理过了】</p>\n<p>4、测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetStudents2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> MybatisUtils.getSession();</span><br><span class=\"line\">   <span class=\"type\">StudentMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> session.getMapper(StudentMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;Student&gt; students = mapper.getStudents2();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Student student : students)&#123;</span><br><span class=\"line\">       System.out.println(</span><br><span class=\"line\">               <span class=\"string\">&quot;学生名:&quot;</span>+ student.getName()</span><br><span class=\"line\">                       +<span class=\"string\">&quot;\\t老师:&quot;</span>+student.getTeacher().getName());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小结</p>\n</blockquote>\n<p>按照查询进行嵌套处理就像SQL中的子查询</p>\n<p>按照结果进行嵌套处理就像SQL中的联表查询</p>\n<h2 id=\"一对多的处理\"><a href=\"#一对多的处理\" class=\"headerlink\" title=\"一对多的处理\"></a>一对多的处理</h2><p>一对多的理解：</p>\n<ul>\n<li>一个老师拥有多个学生</li>\n<li>如果对于老师这边，就是一个一对多的现象，即从一个老师下面拥有一群学生（集合）！</li>\n</ul>\n<blockquote>\n<p>实体类编写</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> tid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">//一个老师多个学生</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Student&gt; students;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>….. 和之前一样，搭建测试的环境！</p>\n<blockquote>\n<p>按结果嵌套处理</p>\n</blockquote>\n<p>1、TeacherMapper接口编写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取指定老师，及老师下的所有学生</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Teacher <span class=\"title function_\">getTeacher</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2、编写接口对应的Mapper配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">   思路:</span></span><br><span class=\"line\"><span class=\"comment\">       1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class=\"line\"><span class=\"comment\">       2. 对查询出来的操作做结果集映射</span></span><br><span class=\"line\"><span class=\"comment\">           1. 集合的话，使用collection！</span></span><br><span class=\"line\"><span class=\"comment\">               JavaType和ofType都是用来指定对象类型的</span></span><br><span class=\"line\"><span class=\"comment\">               JavaType是用来指定pojo中属性的类型</span></span><br><span class=\"line\"><span class=\"comment\">               ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class=\"line\">      select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class=\"line\">      from student s,teacher t</span><br><span class=\"line\">      where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;TeacherStudent&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">result</span>  <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tname&quot;</span>/&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;students&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sid&quot;</span> /&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sname&quot;</span> /&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;tid&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tid&quot;</span> /&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、将Mapper文件注册到MyBatis-config文件中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mapper/TeacherMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetTeacher</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> MybatisUtils.getSession();</span><br><span class=\"line\">   <span class=\"type\">TeacherMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> session.getMapper(TeacherMapper.class);</span><br><span class=\"line\">   <span class=\"type\">Teacher</span> <span class=\"variable\">teacher</span> <span class=\"operator\">=</span> mapper.getTeacher(<span class=\"number\">1</span>);</span><br><span class=\"line\">   System.out.println(teacher.getName());</span><br><span class=\"line\">   System.out.println(teacher.getStudents());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>按查询嵌套处理</p>\n</blockquote>\n<p>1、TeacherMapper接口编写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Teacher <span class=\"title function_\">getTeacher2</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2、编写接口对应的Mapper配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher2&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class=\"line\">select * from teacher where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;TeacherStudent2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;students&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;ArrayList&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;Student&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudentByTeacherId&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">  select * from student where tid = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、将Mapper文件注册到MyBatis-config文件中</p>\n<p>4、测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetTeacher2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> MybatisUtils.getSession();</span><br><span class=\"line\">   <span class=\"type\">TeacherMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> session.getMapper(TeacherMapper.class);</span><br><span class=\"line\">   <span class=\"type\">Teacher</span> <span class=\"variable\">teacher</span> <span class=\"operator\">=</span> mapper.getTeacher2(<span class=\"number\">1</span>);</span><br><span class=\"line\">   System.out.println(teacher.getName());</span><br><span class=\"line\">   System.out.println(teacher.getStudents());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小结</p>\n</blockquote>\n<p>1、关联-association</p>\n<p>2、集合-collection</p>\n<p>3、所以association是用于一对一和多对一，而collection是用于一对多的关系</p>\n<p>4、JavaType和ofType都是用来指定对象类型的</p>\n<ul>\n<li>JavaType是用来指定pojo中属性的类型</li>\n<li>ofType指定的是映射到list集合属性中pojo的类型。</li>\n</ul>\n<p><strong>注意说明：</strong></p>\n<p>1、保证SQL的可读性，尽量通俗易懂</p>\n<p>2、根据实际要求，尽量编写性能更高的SQL语句</p>\n<p>3、注意属性名和字段不一致的问题</p>\n<p>4、注意一对多和多对一 中：字段和属性对应的问题</p>\n<p>5、尽量使用Log4j，通过日志来查看自己的错误</p>\n<blockquote>\n<p>转自狂神说公众号</p>\n</blockquote>\n","categories":["Java"],"tags":["Mybatis"]},{"title":"Vue中给object添值","url":"/posts/85b9edce/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"方式1：push\"><a href=\"#方式1：push\" class=\"headerlink\" title=\"方式1：push\"></a>方式1：push</h1><blockquote>\n<p>push添值可以动态响应</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in myMap2&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;item&#125;&#125;-&#123;&#123;myMap[item]&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;collectionTest&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myMap</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myMap2</span>: [<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setMyMap</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;0&#x27;</span>])</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;2&#x27;</span>]), <span class=\"number\">1000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setMyMap</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">resolve</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;c&#x27;</span>), <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;d&#x27;</span>), <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下</p>\n<p><img src=\"/../images/image-20220503165221082.png\" alt=\"image-20220503165221082\"></p>\n<h1 id=\"方式2：this-obj-arg1-x3D-arg2\"><a href=\"#方式2：this-obj-arg1-x3D-arg2\" class=\"headerlink\" title=\"方式2：this.obj[arg1]&#x3D;arg2\"></a>方式2：this.obj[arg1]&#x3D;arg2</h1><blockquote>\n<p>不能动态响应</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in myMap2&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;item&#125;&#125;-&#123;&#123;myMap[item]&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;collectionTest&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myMap</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myMap2</span>: [<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setMyMap</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;0&#x27;</span>])</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;2&#x27;</span>]), <span class=\"number\">1000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setMyMap</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;0&#x27;</span>] = <span class=\"string\">&#x27;a&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;1&#x27;</span>] = <span class=\"string\">&#x27;b&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">resolve</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;2&#x27;</span>] = <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;3&#x27;</span>] = <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">       </span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<p><img src=\"/../images/image-20220503165645652.png\" alt=\"image-20220503165645652\"></p>\n<h1 id=\"方式3：this-set\"><a href=\"#方式3：this-set\" class=\"headerlink\" title=\"方式3：this.$set()\"></a>方式3：this.$set()</h1><blockquote>\n<p>可以动态响应</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in myMap2&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;item&#125;&#125;-&#123;&#123;myMap[item]&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;collectionTest&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myMap</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myMap2</span>: [<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setMyMap</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;0&#x27;</span>])</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>[<span class=\"string\">&#x27;2&#x27;</span>]), <span class=\"number\">1000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setMyMap</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.$set(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.$set(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">resolve</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.$set(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>), <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.$set(<span class=\"variable language_\">this</span>.<span class=\"property\">myMap</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>), <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<p><img src=\"/../images/image-20220503165841514.png\" alt=\"image-20220503165841514\"></p>\n","categories":["bug解决笔记"],"tags":["Vue"]},{"title":"stream流学习","url":"/posts/fe7403cd/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h1><blockquote>\n<p>Java8中的Stream尽管被称作为“流”，但它和文件流、字符流、字节流<strong>完全没有任何关系</strong>。Stream流使程序员得以站在更高的抽象层次上对集合进行操作[<a href=\"https://www.cnblogs.com/yulinfeng/p/12561664.html#fn1\">1]</a>。也就是说Java8中新引入的Stream流是针对集合的操作。</p>\n</blockquote>\n<h2 id=\"1-迭代\"><a href=\"#1-迭代\" class=\"headerlink\" title=\"1 迭代\"></a>1 迭代</h2><p>我们在使用集合时，最常用的就是迭代。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">calcSum</span><span class=\"params\">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">        sum += list.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如，我们可能会对集合中的元素累加并返回结果。这段代码由于for循环的样板代码并不能很清晰的传达程序员的意图。也就是说，实际上除了方法名叫“计算总和”，程序员必须阅读整个循环体才能理解。你可能觉得一眼就能理解上述代码的意图，但如果碰上下面的代码，你还能一眼理解吗？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;Long, List&lt;Student&gt;&gt; <span class=\"title function_\">useFor</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    Map&lt;Long, List&lt;Student&gt;&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : students) &#123;</span><br><span class=\"line\">        List&lt;Student&gt; list = map.get(student.getStudentNumber());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            map.put(student.getStudentNumber(), list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>阅读完这个循环体以及包含的if判断条件，大概可以知道这是想使用“studentNumber”对“Student”对象分组。这段代码在Stream进行重构后，将会变得非常简洁和<strong>易读</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;Long, List&lt;Student&gt;&gt; <span class=\"title function_\">useStreamByGroup</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    Map&lt;Long, List&lt;Student&gt;&gt; map = students.stream().collect(Collectors.groupingBy(Student::getStudentNumber));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当第一次看到这样的写法时，可能会认为这样的代码可读性不高，不容易测试。我相信，当你在学习掌握Stream后会重新改变对它的看法。</p>\n<h2 id=\"2-Stream\"><a href=\"#2-Stream\" class=\"headerlink\" title=\"2 Stream\"></a>2 Stream</h2><h3 id=\"2-1-创建\"><a href=\"#2-1-创建\" class=\"headerlink\" title=\"2.1 创建\"></a>2.1 创建</h3><p>要想使用Stream，首先要创建一个流，创建流最常用的方式是直接调用集合的<code>stream</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过集合构造流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createByCollection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也能通过数组构造一个流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过数组构造流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createByArrays</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Integer[] intArrays = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    Stream&lt;Integer&gt; stream = Stream.of(intArrays);</span><br><span class=\"line\">    Stream&lt;Integer&gt; stream1 = Arrays.stream(intArrays);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>学习Stream流，掌握集合创建流就足够了。</p>\n<h3 id=\"2-2-使用\"><a href=\"#2-2-使用\" class=\"headerlink\" title=\"2.2 使用\"></a>2.2 使用</h3><p>对于Stream流操作共分为两个大类：<strong>惰性求值</strong>、<strong>及时求值</strong>。</p>\n<p>所谓惰性求值，指的是操作最终不会产生新的集合。及时求值，指的是操作会产生新的集合。举以下示例加以说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过for循环过滤元素返回新的集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list 待过滤的集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 过滤后的集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Integer&gt; <span class=\"title function_\">filterByFor</span><span class=\"params\">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; filterList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Integer number : list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (number &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            filterList.add(number);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过for循环过滤元素返回新的集合，这里的“过滤”表示排除不符合条件的元素。我们使用Stream流过滤并返回新的集合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream流过滤元素返回新的集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list 待过滤的集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 新的集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Integer&gt; <span class=\"title function_\">filterByStream</span><span class=\"params\">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.stream()</span><br><span class=\"line\">            .filter(number -&gt; number &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Stream操作时，先调用了<code>filter</code>方法传入了一个Lambda表达式代表过滤规则，后调用了<code>collect</code>方法表示将流转换为List集合。</p>\n<p>按照常理来想，一个方法调用完后，接着又调用了一个方法，看起来好像做了两次循环，把问题搞得更复杂了。但实际上，这里的<code>filter</code>操作是<strong>惰性求值</strong>，它并不会返回新的集合，这就是Stream流设计精妙的地方。既能在保证可读性的同时，也能保证性能不会受太大影响。</p>\n<p>所以使用Stream流的理想方式就是，<strong>形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果。</strong></p>\n<p>我们不需要去记哪些方法是惰性求值，如果方法的返回值是Stream那么它代表的就是惰性求值。如果返回另外一个值或空，那么它代表的就是及早求值。</p>\n<h3 id=\"2-3-常用的Stream操作\"><a href=\"#2-3-常用的Stream操作\" class=\"headerlink\" title=\"2.3 常用的Stream操作\"></a>2.3 常用的Stream操作</h3><h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>map操作不好理解，它很容易让人以为这是一个转换为Map数据结构的操作。实际上他是将集合中的元素类型，转换为另外一种数据类型。</p>\n<p>例如，你想将“学生”类型的集合转换为只有“学号”类型的集合，应该怎么做？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过for循环提取学生学号集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list 学生对象集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 学生学号集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Long&gt; <span class=\"title function_\">fetchStudentNumbersByFor</span><span class=\"params\">(List&lt;Student&gt; list)</span> &#123;</span><br><span class=\"line\">    List&lt;Long&gt; numbers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : list) &#123;</span><br><span class=\"line\">        numbers.add(student.getStudentNumber());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是只借助JDK的“传统”方式。如果使用Stream则可以直接通过<code>map</code>操作来获取只包含学生学号的集合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream map提取学生学号集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list 学生对象集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 学生学号集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Long&gt; <span class=\"title function_\">fetchStudentNumbersByStreamMap</span><span class=\"params\">(List&lt;Student&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.stream()</span><br><span class=\"line\">               .map(Student::getStudentNumber)</span><br><span class=\"line\">               .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>map</code>传入的是一个方法，同样可以理解为传入的是一个“行为”，在这里我们传入方法“getStudentNumber”表示将通过这个方法进行转换分类。</p>\n<blockquote>\n<p>“Student::getStudentNumber”叫<strong>方法引用</strong>，它是“student -&gt; student.getStudentNumber()”的简写。表示<strong>直接引用已有Java类或对象的方法或构造器</strong>。在这里我们是需要传入“getStudentNumber”方法，在有的地方，你可能会看到这样的代码“Student::new”，new调用的就是构造方法，表示创建一个对象。方法引用，可以将我们的代码变得更加紧凑简洁。</p>\n</blockquote>\n<p>我们再举一个例子，将小写的字符串集合转换为大写字符串集合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream map操作将小写的字符串集合转换为大写</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list 小写字符串集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 大写字符串集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">toUpperByStreamMap</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.stream()</span><br><span class=\"line\">               .map(String::toUpperCase)</span><br><span class=\"line\">               .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p><code>filter</code>，过滤。这里的过滤含义是“排除不符合某个条件的元素”，也就是返回true的时候保留，返回false排除。</p>\n<p>我们仍然以“学生”对象为例，要排除掉分数低于60分的学生。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过for循环筛选出分数大于60分的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 待过滤的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 分数大于60分的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">fetchPassedStudentsByFor</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    List&lt;Student&gt; passedStudents = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : students) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (student.getScore().compareTo(<span class=\"number\">60.0</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            passedStudents.add(student);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> passedStudents;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是我们通常的实现方式，通过for循环能解决“一切”问题，如果使用Stream filter一行就搞定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream filter筛选出分数大于60分的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 待过滤的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 分数大于60分的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">fetchPassedStudentsByStreamFilter</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .filter(student -&gt; student.getScore().compareTo(<span class=\"number\">60.0</span>) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h4><p>排序，也是日常最常用的操作之一。我们常常会把数据按照修改或者创建时间的倒序、升序排列，这步操作通常会放到SQL语句中。但如果实在是遇到要对集合进行排序时，我们通常也会使用<code>Comparator.sort</code>静态方法进行排序，如果是复杂的对象排序，还需要实现<code>Comparator</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Collections.sort静态方法 + Comparator匿名内部类对学生成绩进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 待排序学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 排好序的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Student&gt; <span class=\"title function_\">sortedByComparator</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    Collections.sort(students, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Student student1, Student student2)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> student1.getScore().compareTo(student2.getScore());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>关于<code>Comparator</code>可以查看这篇文章《<a href=\"https://www.cnblogs.com/yulinfeng/p/8460569.html\">似懂非懂的Comparable与Comparator</a>》。简单来讲，我们需要实现<code>Compartor</code>接口的<code>compare</code>方法，这个方法有两个参数用于比较，返回1代表前者大于后者，返回0代表前者等于后者，返回-1代表前者小于后者。</p>\n</blockquote>\n<p>当然我们也可以手动实现冒泡算法对学生成绩进行排序，不过这样的代码大多出现在课堂教学中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用冒泡排序算法对学生成绩进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 待排序学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 排好序的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Student&gt; <span class=\"title function_\">sortedByFor</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; students.size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; students.size() - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (students.get(j).getScore().compareTo(students.get(j + <span class=\"number\">1</span>).getScore()) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">Student</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> students.get(j);</span><br><span class=\"line\">                students.set(j, students.get(j + <span class=\"number\">1</span>));</span><br><span class=\"line\">                students.set(j + <span class=\"number\">1</span>, temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在使用Stream sorted后，你会发现代码将变得无比简洁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream sorted对学生成绩进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 待排序学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 排好序的学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Student&gt; <span class=\"title function_\">sortedByStreamSorted</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">                   .sorted(Comparator.comparing(Student::getScore))</span><br><span class=\"line\">                   .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>简洁的后果就是，代码变得不那么好读，其实并不是代码的可读性降低了，而只是代码不是按照你的习惯去写的。而大部分人恰好只习惯墨守成规，而不愿意接受新鲜事物。</p>\n<p>上面的排序是按照从小到大排序，如果想要从大到小应该如何修改呢？</p>\n<p><code>Compartor.sort</code>方法和for循环调换if参数的位置即可。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> student1.getScore().compareTo(student2.getScore()); </span><br><span class=\"line\">修改为</span><br><span class=\"line\"><span class=\"keyword\">return</span> student2.getScore().compareTo(student1.getScore());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (students.<span class=\"keyword\">get</span>(j).getScore().compareTo(students.<span class=\"keyword\">get</span>(j + <span class=\"number\">1</span>).getScore()) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">修改为</span><br><span class=\"line\"><span class=\"keyword\">if</span> (students.<span class=\"keyword\">get</span>(j).getScore().compareTo(students.<span class=\"keyword\">get</span>(j + <span class=\"number\">1</span>).getScore()) &lt; <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这改动看起来很简单，但如果这是一段<strong>没有注释并且不是你本人写的代码</strong>，你能一眼知道是按降序还是升序排列吗？你还能说这是可读性强的代码吗？</p>\n<p>如果是Stream操作。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">return students<span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">               <span class=\"selector-class\">.sorted</span>(Comparator<span class=\"selector-class\">.comparing</span>(Student::getScore))</span><br><span class=\"line\">               .<span class=\"built_in\">collect</span>(Collectors.<span class=\"built_in\">toList</span>());</span><br><span class=\"line\">修改为</span><br><span class=\"line\">return students<span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">               <span class=\"selector-class\">.sorted</span>(Comparator<span class=\"selector-class\">.comparing</span>(Student::getScore).<span class=\"built_in\">reversed</span>())</span><br><span class=\"line\">               .<span class=\"built_in\">collect</span>(Collectors.<span class=\"built_in\">toList</span>());</span><br></pre></td></tr></table></figure>\n\n<p>这就是<strong>声明式编程</strong>，你只管叫它做什么，而不像<strong>命令式编程</strong>叫它如何做。</p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p><code>reduce</code>是将传入一组值，根据计算模型输出一个值。例如求一组值的最大值、最小值、和等等。</p>\n<p>不过使用和读懂<code>reduce</code>还是比较晦涩，如果是简单最大值、最小值、求和计算，Stream已经为我们提供了更简单的方法。如果是复杂的计算，可能为了代码的可读性和维护性还是建议用传统的方式表达。</p>\n<p>我们来看几个使用<code>reduce</code>进行累加例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用没有初始值对集合中的元素进行累加</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> numbers 集合元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 累加结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer <span class=\"title function_\">calcTotal</span><span class=\"params\">(List&lt;Integer&gt; numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.stream()</span><br><span class=\"line\">            .reduce((total, number) -&gt; total + number).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>reduce</code>有3个重载方法，<br>第一个例子调用的是<code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</code>它只有<code>BinaryOperator</code>一个参数，这个接口是一个<strong>函数接口</strong>，代表它可以接收一个Lambda表达式，它继承自<code>BiFunction</code>函数接口，在<code>BiFunction</code>接口中，只有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BiFunction</span>&lt;T, U, R&gt; &#123;</span><br><span class=\"line\">    R <span class=\"title function_\">apply</span><span class=\"params\">(T t, U u)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法有两个参数。也就是说，传入<code>reduce</code>的Lambda表达式需要“实现”这个方法。如果不理解这是什么意思，我们可以抛开Lambda表达式，从纯粹传统的接口角度去理解。</p>\n<p>首先，<code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</code>方法接收<code>BinaryOperator</code>类型的对象，而<code>BinaryOperator</code>是一个接口并且继承自<code>BiFunction</code>接口，而在<code>BiFunction</code>中只有一个方法定义<code>R apply(T t, U u)</code>，也就是说我们需要实现<code>apply</code>方法。</p>\n<p>其次，接口需要被实现，我们不妨传入一个匿名内部类，并且实现<code>apply</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Integer <span class=\"title function_\">calcTotal</span><span class=\"params\">(List&lt;Integer&gt; numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.stream()</span><br><span class=\"line\">            .reduce(<span class=\"keyword\">new</span> <span class=\"title class_\">BinaryOperator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> Integer <span class=\"title function_\">apply</span><span class=\"params\">(Integer integer, Integer integer2)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> integer + integer2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们在将匿名内部类改写为Lambda风格的代码，箭头左边是参数，右边是函数主体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Integer <span class=\"title function_\">calcTotal</span><span class=\"params\">(List&lt;Integer&gt; numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.stream()</span><br><span class=\"line\">            .reduce((total, number) -&gt; total + number).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至于为什么两个参数相加最后就是不断累加的结果，这就是<code>reduce</code>的内部实现了。</p>\n<p>接着看第二个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</span></span><br><span class=\"line\"><span class=\"comment\"> * 赋初始值为1，对集合中的元素进行累加</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> numbers 集合元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 累加结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer <span class=\"title function_\">calcTotal2</span><span class=\"params\">(List&lt;Integer&gt; numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.stream()</span><br><span class=\"line\">            .reduce(<span class=\"number\">1</span>, (total, number) -&gt; total + number);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第二个例子调用的是<code>reduce</code>的<code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</code>重载方法，相比于第一个例子，它多了一个参数“identity”，这是进行后续计算的初始值，<code>BinaryOperator</code>和第一个例子一样。</p>\n<p>第三个例子稍微复杂一点，前面两个例子集合中的元素都是基本类型，而现实情况是，集合中的参数往往是一个<strong>对象</strong>我们常常需要对对象中的某个字段做累加计算，比如计算学生对象的总成绩。</p>\n<p>我们先来看for循环怎么做的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过for循环对集合中的学生成绩字段进行累加</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 分数总和</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Double <span class=\"title function_\">calcTotalScoreByFor</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : students) &#123;</span><br><span class=\"line\">        total += student.getScore();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>要按前文的说法，“这样的代码充斥了样板代码，除了方法名，代码并不能直观的反应程序员的意图，程序员需要读完整个循环体才能理解”，但凡事不是绝对的，如果换做<code>reduce</code>操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;U&gt; U reduce(U identity,</span></span><br><span class=\"line\"><span class=\"comment\"> *                  BiFunction&lt;U, ? super T, U&gt; accumulator,</span></span><br><span class=\"line\"><span class=\"comment\"> *                  BinaryOperator&lt;U&gt; combiner);</span></span><br><span class=\"line\"><span class=\"comment\"> * 集合中的元素是&quot;学生&quot;对象，对学生的&quot;score&quot;分数字段进行累加</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 分数总和</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Double <span class=\"title function_\">calcTotalScoreByStreamReduce</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .reduce(Double.valueOf(<span class=\"number\">0</span>),</span><br><span class=\"line\">                    (total, student) -&gt; total + student.getScore(),</span><br><span class=\"line\">                    (aDouble, aDouble2) -&gt; aDouble + aDouble2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样的代码，已经不是样板代码的问题了，是大部分程序员即使读十遍可能也不知道要表达什么含义。但是为了学习Stream我们还是要硬着头皮去理解它。</p>\n<p>Lambda表达式不好理解，过于简洁的语法，也代表更少的信息量，我们还是先将Lambda表达式还原成匿名内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Double <span class=\"title function_\">calcTotalScoreByStreamReduce</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .reduce(Double.valueOf(<span class=\"number\">0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">BiFunction</span>&lt;Double, Student, Double&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> Double <span class=\"title function_\">apply</span><span class=\"params\">(Double total, Student student)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> total + student.getScore();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">BinaryOperator</span>&lt;Double&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> Double <span class=\"title function_\">apply</span><span class=\"params\">(Double aDouble, Double aDouble2)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> aDouble + aDouble2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>reduce</code>的第三个重载方法<code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner);</code>一共有3个参数，与第一、二个重载方法不同的是，第一、第二个重载方法参数和返回类型都是泛型“T”，意思是入参和返回都是同一种数据类型。但在第三个例子中，入参是<code>Student</code>对象，返回却是<code>Double</code>，显然不能使用第一、二个重载方法。</p>\n<p>第三个重载方法的第一个参数类型是泛型“U”，它的返回类型也是泛型“U”，所以第一个参数类型，代表了返回的数据类型，我们必须将第一个类型定义为<code>Double</code>，<strong>例子中的入参是<code>Double.valueOf(0)</code>表示了累加的初始值为0，且返回值是<code>Double</code>类型</strong>。第二个参数可以简单理解为“应该如何计算，累加还是累乘”的计算模型。最难理解的是第三个参数，因为前两个参数类型看起来已经能满足我们的需求，为什么还有第三个参数呢？</p>\n<p>当我在第三个参数中加上一句输出时，发现它确实没有用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Double <span class=\"title function_\">calcTotalScoreByStreamReduce</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .reduce(Double.valueOf(<span class=\"number\">0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">BiFunction</span>&lt;Double, Student, Double&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> Double <span class=\"title function_\">apply</span><span class=\"params\">(Double total, Student student)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> total + student.getScore();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">BinaryOperator</span>&lt;Double&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> Double <span class=\"title function_\">apply</span><span class=\"params\">(Double aDouble, Double aDouble2)</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;第三个参数的作用&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> aDouble + aDouble2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台没有输出“第三个参数的作用”，改变它的返回值最终结果也没有任何改变，这的确表示它<strong>真的没有用</strong>。</p>\n<p>第三个参数在这里的确没有用，这是因为我们目前所使用的Stream流是串行操作，它在<strong>并行Stream流</strong>中发挥的是<strong>多路合并</strong>的作用，在下一章会继续介绍并行Stream流，这里就不再多做介绍。</p>\n<p>对于<code>reduce</code>操作，我的个人看法是，<strong>不建议在现实中使用</strong>。如果你有累加、求最大值、最小值的需求，Stream封装了更简单的方法。如果是特殊的计算，不如直接按for循环实现，如果一定要使用Stream对学生成绩求和也不妨换一个思路。</p>\n<p>前面提到<code>map</code>方法可以将集合中的元素类型转换为另一种类型，那我们就能把学生的集合转换为分数的集合，再调用<code>reduce</code>的第一个重载方法计算总和：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 先使用map将学生集合转换为分数的集合</span></span><br><span class=\"line\"><span class=\"comment\"> * 再使用reduce调用第一个重载方法计算总和</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 分数总和</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Double <span class=\"title function_\">calcTotalScoreByStreamMapReduce</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .map(Student::getScore)</span><br><span class=\"line\">            .reduce((total, score) -&gt; total + score).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min\"></a>min</h4><p><code>min</code>方法能返回集合中的最小值。它接收一个<code>Comparator</code>对象，Java8对<code>Comparator</code>接口提供了新的静态方法<code>comparing</code>，这个方法返回<code>Comparator</code>对象，以前我们需要手动实现<code>compare</code>比较，现在我们只需要调用<code>Comparator.comparing</code>静态方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream min计算集合中的最小值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> numbers 集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 最小值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer <span class=\"title function_\">minByStreamMin</span><span class=\"params\">(List&lt;Integer&gt; numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers.stream()</span><br><span class=\"line\">                  .min(Comparator.comparingInt(Integer::intValue)).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>Comparator.comparingInt</code>用于比较int类型数据。因为集合中的元素是Integer类型，所以我们传入Integer类型的iniValue方法。如果集合中是对象类型，我们直接调用<code>Comparator.comparing</code>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过Stream min计算学生集合中的最低成绩</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 最低成绩</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Double <span class=\"title function_\">minScoreByStreamMin</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Student</span> <span class=\"variable\">minScoreStudent</span> <span class=\"operator\">=</span> students.stream()</span><br><span class=\"line\">            .min(Comparator.comparing(Student::getScore)).get();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minScoreStudent.getScore();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max\"></a>max</h4><p>和<code>min</code>的用法相同，含义相反取最大值。这里不再举例。</p>\n<h4 id=\"summaryStatistics\"><a href=\"#summaryStatistics\" class=\"headerlink\" title=\"summaryStatistics\"></a>summaryStatistics</h4><p>求和操作也是常用的操作，利用<code>reduce</code>会让代码晦涩难懂，特别是复杂的对象类型。</p>\n<p>好在Streaam提供了求和计算的简便方法——<code>summaryStatistics</code>，这个方法并不是Stream对象提供，而是<code>IntStream</code>，可以把它当做处理基本类型的流，同理还有<code>LongStream</code>、<code>DoubleStream</code>。</p>\n<p><code>summaryStatistics</code>方法也不光是只能求和，它还能求最小值、最大值。</p>\n<p>例如我们求学生成绩的平均分、总分、最高分、最低分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 学生类型的集合常用计算</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">calc</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">DoubleSummaryStatistics</span> <span class=\"variable\">summaryStatistics</span> <span class=\"operator\">=</span> students.stream()</span><br><span class=\"line\">            .mapToDouble(Student::getScore)</span><br><span class=\"line\">            .summaryStatistics();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;平均分：&quot;</span> + summaryStatistics.getAverage());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总分：&quot;</span> + summaryStatistics.getSum());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;最高分：&quot;</span> + summaryStatistics.getMax());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;最低分：&quot;</span> + summaryStatistics.getMin());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>返回的<code>summaryStatistics</code>包含了我们想要的所有结果，不需要我们单独计算。<code>mapToDouble</code>方法将Stream流按“成绩”字段组合成新的<code>DoubleStream</code>流，<code>summaryStatistics</code>方法返回的<code>DoubleSummaryStatistics</code>对象为我们提供了常用的计算。</p>\n<p>灵活运用好<code>summaryStatistics</code>，一定能给你带来更少的bug和更高效的编码。</p>\n<h2 id=\"3-Collectors\"><a href=\"#3-Collectors\" class=\"headerlink\" title=\"3 Collectors\"></a>3 Collectors</h2><p>前面的大部分操作都是以<code>collect(Collectors.toList())</code>结尾，看多了自然也大概猜得到它是将流转换为集合对象。最大的功劳当属Java8新提供的类——<code>Collectors</code>收集器。</p>\n<p><code>Collectors</code>不但有<code>toList</code>方法能将流转换为集合，还包括<code>toMap</code>转换为Map数据类型，还能<strong>分组</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将学生类型的集合转换为只包含名字的集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 学生姓名集合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; <span class=\"title function_\">translateNames</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">                   .map(Student::getStudentName)</span><br><span class=\"line\">                   .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将学生类型的集合转换为Map类型，key=学号，value=学生</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 学生Map</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;Long, Student&gt; <span class=\"title function_\">translateStudentMap</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .collect(Collectors.toMap(Student::getStudentNumber, student -&gt; student));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 按学生的学号对学生集合进行分组返回Map，key=学生学号，value=学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> students 学生集合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 按学号分组的Map</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;Long, List&lt;Student&gt;&gt; <span class=\"title function_\">studentGroupByStudentNumber</span><span class=\"params\">(List&lt;Student&gt; students)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Student::getStudentNumber));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上转自博客园<a href=\"https://www.cnblogs.com/yulinfeng/\">CoderBuff</a></p>\n</blockquote>\n<h1 id=\"Java-Stream-iterate-方法及代码示例\"><a href=\"#Java-Stream-iterate-方法及代码示例\" class=\"headerlink\" title=\"Java Stream.iterate() 方法及代码示例\"></a>Java Stream.iterate() 方法及代码示例</h1><p>生成一个通过将给定的函数迭代应用到初始元素而生成的有序的流.</p>\n<h3 id=\"初见版本\"><a href=\"#初见版本\" class=\"headerlink\" title=\"初见版本\"></a>初见版本</h3><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Stream&lt;T&gt; iterate(T seed, Predicate&lt;? super T&gt; hasNext, UnaryOperator&lt;T&gt; next)</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Stream&lt;T&gt; iterate(T seed, UnaryOperator&lt;T&gt; f)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><table>\n<thead>\n<tr>\n<th>参数类型</th>\n<th>参数名称</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>T</code></td>\n<td>seed</td>\n<td>初始化的元素</td>\n</tr>\n<tr>\n<td><code>Predicate&lt;? super T&gt;</code></td>\n<td>hasNext</td>\n<td>应用于元素以确定流何时必须终止的断言</td>\n</tr>\n<tr>\n<td><code>UnaryOperator&lt;T&gt;</code></td>\n<td>next</td>\n<td>作用于前一个元素以生成新元素的函数</td>\n</tr>\n<tr>\n<td><code>UnaryOperator&lt;T&gt;</code></td>\n<td>f</td>\n<td>作用于前一个元素以生成新元素的函数</td>\n</tr>\n<tr>\n<td><code>类型参数</code></td>\n<td>T</td>\n<td>流元素的类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回一个新的有序的流</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>如果使用了提供可终结流的断言的方法时, 则当断言返回 false 流终结.</p>\n<p>如果使用的方法不包含可可终结流的断言, 则返回的流是无限的.</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>该方法生成的每一个流的元素都受到前一个元素的影响, 如果是第一个元素则受到初始化的元素 seed 的影响</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"使用迭代生成一个流的示例\"><a href=\"#使用迭代生成一个流的示例\" class=\"headerlink\" title=\"使用迭代生成一个流的示例\"></a>使用迭代生成一个流的示例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.yi21.stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.UnaryOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Yi21StreamIterate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Predicate&lt;Integer&gt; isPositive = <span class=\"keyword\">new</span> <span class=\"title class_\">Predicate</span>&lt;&gt;()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(Integer t)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> t &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        UnaryOperator&lt;Integer&gt; minus = <span class=\"keyword\">new</span> <span class=\"title class_\">UnaryOperator</span>&lt;&gt;()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">apply</span><span class=\"params\">(Integer t)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> t - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.iterate(<span class=\"number\">3</span>, isPositive, minus);</span><br><span class=\"line\">        stream.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;以下将生成一个无限的流.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        stream = Stream.iterate(<span class=\"number\">3</span>, minus);</span><br><span class=\"line\">        stream.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">以下将生成一个无限的流.</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">0</span><br><span class=\"line\">-1</span><br><span class=\"line\">.....</span><br><span class=\"line\">//直到终止执行程序</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["stream流"]},{"title":"综合评审功能实现过程中的问题记录","url":"/posts/a9cc7123/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"bug1-往集合中添加对象\"><a href=\"#bug1-往集合中添加对象\" class=\"headerlink\" title=\"bug1-往集合中添加对象\"></a>bug1-往集合中添加对象</h1><blockquote>\n<p>问题描述：这样添加最后zDataList中的zData都是同一个，为最后一次改变的zData值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ZData</span> <span class=\"variable\">zData</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Zdata</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;ZData&gt; zDataList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (ZIndicatorFileVo zIndicatorFileVo : zIndicatorFileVoListCopy) &#123;</span><br><span class=\"line\">    zData.setIndicatorId(zIndicatorFileVo.getId());</span><br><span class=\"line\">    zDataList.add(zData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>思考解决：1、新建一个zData对象，失败，效果一样</p>\n<p>​\t\t\t\t\t2、深克隆，成功解决</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;ZData&gt; zDataList2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (ZIndicatorFileVo zIndicatorFileVo : zIndicatorFileVoListCopy) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要深克隆，不然指向的都是同一个地址</span></span><br><span class=\"line\">    <span class=\"type\">ZData</span> <span class=\"variable\">zData2</span> <span class=\"operator\">=</span> (ZData) zData.clone();</span><br><span class=\"line\">    zData2.setIndicatorId(zIndicatorFileVo.getId());</span><br><span class=\"line\">    zDataList2.add(zData2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Mybatis-plus条件构造器总结\"><a href=\"#Mybatis-plus条件构造器总结\" class=\"headerlink\" title=\"Mybatis-plus条件构造器总结\"></a>Mybatis-plus条件构造器总结</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eq = 等于</span><br><span class=\"line\">alleq = 都等于</span><br><span class=\"line\">ne != 不等于</span><br><span class=\"line\">gt &gt; 大于</span><br><span class=\"line\">lt &lt; 小于</span><br><span class=\"line\">ge &gt;= 大于等于</span><br><span class=\"line\">le &lt;= 小于等于</span><br><span class=\"line\">between 值1 and 值2</span><br><span class=\"line\">notBetween not值1 and 值2</span><br><span class=\"line\">like %值%</span><br><span class=\"line\">likeLeft ： LIKE &#x27;%值&#x27;</span><br><span class=\"line\">likeRight ： LIKE &#x27;值%&#x27;</span><br><span class=\"line\">or 可以用于拼接, 可以用于嵌套</span><br><span class=\"line\">and 默认用and连接, 可以用于嵌套</span><br><span class=\"line\">notLike not%值%</span><br><span class=\"line\">isNull 为NUll</span><br><span class=\"line\">isNotNull 不为空</span><br><span class=\"line\">in 值在里面</span><br><span class=\"line\">notIn 值不在里面</span><br><span class=\"line\">inSql 写intsql</span><br><span class=\"line\">notInsql 写notInSql</span><br><span class=\"line\">groupBy 分组</span><br><span class=\"line\">orderByAsc 正序</span><br><span class=\"line\">orderByDesc 降序</span><br><span class=\"line\">having 设置条件</span><br><span class=\"line\"></span><br><span class=\"line\">//书写顺序：</span><br><span class=\"line\">select-&gt;distinct-&gt;from-&gt;join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Vue深度监听笔记\"><a href=\"#Vue深度监听笔记\" class=\"headerlink\" title=\"Vue深度监听笔记\"></a>Vue深度监听笔记</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果监听的是一个对象，那么我们这种写法是监听不到对象内部的变化的。</span><br><span class=\"line\"></span><br><span class=\"line\">需要深度监听</span><br><span class=\"line\">1、watch加上deep:true之后就是深度监听</span><br><span class=\"line\">2、handler中返回变化后端obj</span><br><span class=\"line\">3、watch第一次加载不执行，数据有变化才会执行，如果需要页面加载完毕执行，那就加上immediate:true与deep同级</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"bug2-获取session\"><a href=\"#bug2-获取session\" class=\"headerlink\" title=\"bug2-获取session\"></a>bug2-获取session</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个是从客户端获取，用户第一次登录时没有sessionId为null会报错</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">requestedSessionId</span> <span class=\"operator\">=</span> request.getRequestedSessionId();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取id，如果不存在就创建</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> request.getSession(<span class=\"literal\">true</span>).getId();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断session是否过期</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(request.getSession(<span class=\"literal\">false</span>)==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Session has been invalidated!&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Session is active!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"bug2-lt-el-form-gt-的rule一直提示的bug\"><a href=\"#bug2-lt-el-form-gt-的rule一直提示的bug\" class=\"headerlink\" title=\"bug2-&lt;el-form&gt;的rule一直提示的bug\"></a>bug2-<code>&lt;el-form&gt;</code>的rule一直提示的bug</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">问题原因</span><br><span class=\"line\">出现问题原因主要有4个</span><br><span class=\"line\"></span><br><span class=\"line\">el-form 是否绑定了值 :model</span><br><span class=\"line\">el-form 是否绑定了验证规则 :rules</span><br><span class=\"line\">el-form-item标签是否有 prop，并且 prop 的值是否和rules的值对应</span><br><span class=\"line\">el-form-item标签中 prop 的名称和 el-input 标签中 v-model 的名称一致</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"bug3-springsecurity获取不到值\"><a href=\"#bug3-springsecurity获取不到值\" class=\"headerlink\" title=\"bug3-springsecurity获取不到值\"></a>bug3-springsecurity获取不到值</h1><blockquote>\n<p>查看源码</p>\n</blockquote>\n<p><img src=\"/../images/image-20220514232932180.png\" alt=\"image-20220514232932180\"></p>\n<p><img src=\"/../images/image-20220514233010102.png\" alt=\"image-20220514233010102\"></p>\n<blockquote>\n<p>问题原因：我前端封装的axios请求默认是json格式</p>\n<p>解决：1、封装一个postForm方法，设置请求头为form</p>\n<p>​\t\t\t2、安装qs，利用qs.stringify()方法</p>\n</blockquote>\n<h1 id=\"bug4-前端报错cors-origin跨域问题\"><a href=\"#bug4-前端报错cors-origin跨域问题\" class=\"headerlink\" title=\"bug4-前端报错cors-origin跨域问题\"></a>bug4-前端报错cors-origin跨域问题</h1><blockquote>\n<p>这个报错不一定是就是跨域问题，也有可能是你的返回值有问题</p>\n</blockquote>\n<h1 id=\"bug5-Vue页面钩子函数mounted问题\"><a href=\"#bug5-Vue页面钩子函数mounted问题\" class=\"headerlink\" title=\"bug5-Vue页面钩子函数mounted问题\"></a>bug5-Vue页面钩子函数mounted问题</h1><blockquote>\n<p>子组件里的mounted也会在一并加载，这个我一直没反应过来，好傻</p>\n</blockquote>\n","categories":["bug解决笔记"],"tags":["SpringBoot","Vue"]},{"title":"RabbitMQ安装","url":"/posts/192b6bf4/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"一、下载安装Erlang\"><a href=\"#一、下载安装Erlang\" class=\"headerlink\" title=\"一、下载安装Erlang\"></a>一、下载安装Erlang</h2><ul>\n<li>因为RabbitMQ是使用Erlang开发的，所以安装RabbitMQ的前提需要安装Erlang</li>\n<li>下载地址：<a href=\"https://link.zhihu.com/?target=https://www.erlang.org/downloads\">Erlang Programming Language</a></li>\n</ul>\n<p> <img src=\"/../images/image-20220525160408089.png\" alt=\"image-20220525160408089\"></p>\n<blockquote>\n<p>一路next即可，有需要可以改个安装路径</p>\n<p><strong>注意：安装路径不能有中文和空格</strong></p>\n</blockquote>\n<ul>\n<li>新增系统变量：</li>\n</ul>\n<p>名称：ERLANG_HOME</p>\n<p>值：D:\\Program Files\\erl-25.0（刚才安装的地址）</p>\n<ul>\n<li>编辑path变量，新增：%ERLANG_HOME%\\bin</li>\n</ul>\n<h2 id=\"二、下载安装RabbitMQ\"><a href=\"#二、下载安装RabbitMQ\" class=\"headerlink\" title=\"二、下载安装RabbitMQ\"></a>二、下载安装RabbitMQ</h2><ul>\n<li>下载地址：<a href=\"https://link.zhihu.com/?target=https://www.rabbitmq.com/download.html\">Downloading and Installing RabbitMQ — RabbitMQ</a></li>\n</ul>\n<p> <img src=\"/../images/image-20220525160628937.png\" alt=\"image-20220525160628937\"></p>\n<p> <img src=\"/../images/image-20220525160643364.png\" alt=\"image-20220525160643364\"></p>\n<blockquote>\n<p><strong>安装前注意</strong>：新建环境变量（这个很重要，不然如果你电脑是中文名的话，最后启动不了）</p>\n<pre><code> 在你的电脑，系统变量那里添加一个RABBITMQ_BASE  ，变量路径为一个不含英文的路径 比如 E:\\rabbit\n</code></pre>\n<p>一路next即可，有需要可以改个安装路径</p>\n</blockquote>\n<p><strong>注意：安装路径不能有中文和空格</strong></p>\n<h2 id=\"三、Rabbitmq-管理插件启动，可视化界面\"><a href=\"#三、Rabbitmq-管理插件启动，可视化界面\" class=\"headerlink\" title=\"三、Rabbitmq 管理插件启动，可视化界面\"></a>三、Rabbitmq 管理插件启动，可视化界面</h2><p>rabbitmq-plugins enable rabbitmq_management 启动</p>\n<p>rabbitmq-plugins disable rabbitmq_management 关闭</p>\n","categories":["安装教程"],"tags":["rabbitmq"]},{"title":"Hello World","url":"/posts/4a17b156/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"mybatis字段回填","url":"/posts/875ed921/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>最近需要用到一个mybatis的id字段回填功能</p>\n<p>mybatis需要自己配，mybatis-plus是自带的</p>\n<p>但是mybatis-plus是单表操作</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">useGeneratedKeys：必须设置为<span class=\"literal\">true</span>，否则无法获取到主键id。</span><br><span class=\"line\"></span><br><span class=\"line\">keyProperty：设置为POJO对象的主键id属性名称。</span><br><span class=\"line\"></span><br><span class=\"line\">keyColumn：设置为数据库记录的主键id字段名称。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">&lt;</span><span class=\"keyword\">insert</span> id<span class=\"operator\">=</span>&quot;insert&quot; parameterType<span class=\"operator\">=</span>&quot;User&quot; useGeneratedKeys<span class=\"operator\">=</span>&quot;true&quot; keyProperty<span class=\"operator\">=</span>&quot;id&quot; keyColumn<span class=\"operator\">=</span>&quot;id&quot;<span class=\"operator\">&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">user</span>(name,age) <span class=\"keyword\">values</span> (#&#123;name,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>&#125;,#&#123;age,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>&#125;)</span><br><span class=\"line\"><span class=\"operator\">&lt;</span><span class=\"operator\">/</span><span class=\"keyword\">insert</span><span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>java测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    user.setName(<span class=\"string\">&quot;admin10&quot;</span>);</span><br><span class=\"line\">    user.setAge(<span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;返回结果:&quot;</span>+user.insert(user));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;主键id:&quot;</span>+user.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","categories":["SSM"],"tags":["Mybatis"]},{"title":"springSecurity的认证授权问题","url":"/posts/a5715d23/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>hasRole和hasAuthority</p>\n</blockquote>\n<p>先看源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAuthority</span><span class=\"params\">(String authority)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasAnyAuthority(authority);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAnyAuthority</span><span class=\"params\">(String... authorities)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasAnyAuthorityName(<span class=\"literal\">null</span>, authorities);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasRole</span><span class=\"params\">(String role)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasAnyRole(role);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAnyRole</span><span class=\"params\">(String... roles)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasAnyAuthorityName(defaultRolePrefix, roles);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAnyAuthorityName</span><span class=\"params\">(String prefix, String... roles)</span> &#123;</span><br><span class=\"line\">    Set&lt;String&gt; roleSet = getAuthoritySet();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String role : roles) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">defaultedRole</span> <span class=\"operator\">=</span> getRoleWithDefaultPrefix(prefix, role);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (roleSet.contains(defaultedRole)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hasRole会给定义的权限加上默认前缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">defaultRolePrefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ROLE_&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这对我个人来说感觉很不舒服，因为我觉得这是多此一举，而且我还在定义的时候给加上”ROLE_”前缀<br>所以我现在代码中统一使用hasAuthority()</p>\n","categories":["Spring"],"tags":["Spring Security"]}]